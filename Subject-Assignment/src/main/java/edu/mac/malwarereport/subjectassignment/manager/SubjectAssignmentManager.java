/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.subjectassignment.manager;

import edu.mac.malwarereport.subjectassignment.data.SubjectAssignmentFacade;
import edu.mac.malwarereport.subjectassignment.entity.SubjectAssignment;
import edu.mac.malwarereport.subjectassignment.outputinfo.MappingStatus;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

@Stateless
public class SubjectAssignmentManager {

    @Inject
    private SubjectAssignmentFacade subjectAssignmentFacade;
    
    public MappingStatus create(SubjectAssignment subjectAssignment){
        if(!subjectAssignmentFacade.mappingExist(subjectAssignment)){
            try{
                subjectAssignmentFacade.create(subjectAssignment);
                return MappingStatus.SUCCESS;
            } catch (Exception e){
                return MappingStatus.FAILURE;
            }
        }else{
            return MappingStatus.EXIST;
        }
    }
    
//    public MappingStatus update(SubjectAssignment subjectAssignment){
//        long updatedSecondaryId = subjectAssignment.getSecondaryId();
//        try{
//        SubjectAssignment currentSubjectAssignment = subjectAssignmentFacade.getMappingByPrimaryId(subjectAssignment);
//        currentSubjectAssignment.setSecondaryId(updatedSecondaryId);
//        subjectAssignmentFacade.edit(currentSubjectAssignment);
//            return MappingStatus.SUCCESS;
//        }catch (Exception e){
//            return MappingStatus.FAILURE;
//        }
//    }
    
    public boolean delete(SubjectAssignment subjectAssignment){
        if(subjectAssignmentFacade.getSubjectAssignment(subjectAssignment)!=null){
            subjectAssignment = subjectAssignmentFacade.getSubjectAssignment(subjectAssignment);
            subjectAssignmentFacade.remove(subjectAssignment);
            return true;
        }else{
            return false;
        }
        
    }
    
    public boolean deleteAllByPrimary(SubjectAssignment subjectAssignment){
        if(subjectAssignmentFacade.getAllMappingByPrimaryId(subjectAssignment)!=null){
            for(SubjectAssignment deleteSubjectAssignment : subjectAssignmentFacade.getAllMappingByPrimaryId(subjectAssignment)){
                subjectAssignmentFacade.remove(deleteSubjectAssignment);
            }
            return true;
        }else{
            return false;
        }
        
    }
    
//    public boolean deleteByPrimary(SubjectAssignment subjectAssignment){
//        if(subjectAssignmentFacade.getMappingByPrimaryId(subjectAssignment)!=null){
//            subjectAssignment = subjectAssignmentFacade.getMappingByPrimaryId(subjectAssignment);
//            subjectAssignmentFacade.remove(subjectAssignment);
//            return true;
//        }else{
//            return false;
//        }
//        
//    }
    
    public boolean isPrimaryMapped(SubjectAssignment subjectAssignment){
        return subjectAssignmentFacade.mappingExistByPrimaryId(subjectAssignment);
    }
    
    public boolean isSecondaryMapped(SubjectAssignment subjectAssignment){
        return subjectAssignmentFacade.mappingExistBySecondaryId(subjectAssignment);
    }
    
    public boolean isMapped(SubjectAssignment subjectAssignment){
        return subjectAssignmentFacade.mappingExist(subjectAssignment);
    }
    
    //GET ALL ACCOUNT OF SPECIFIC ROLE
    public List<Long> getAllPrimaryId(SubjectAssignment subjectAssignment){
        List<SubjectAssignment> subjectAssignmentList = subjectAssignmentFacade.getAllMappingBySecondaryId(subjectAssignment);
        List<Long> primaryIdList = new ArrayList<>();
        for(SubjectAssignment tempSubjectAssignment : subjectAssignmentList){
                primaryIdList.add(tempSubjectAssignment.getPrimaryId());
        }
        return primaryIdList;
    }
    
    //GET ALL ROLE OF SPECIFIC ACCOUNT
    public List<Long> getAllSecondaryId(SubjectAssignment subjectAssignment){
        List<SubjectAssignment> subjectAssignmentList = subjectAssignmentFacade.getAllMappingByPrimaryId(subjectAssignment);
        List<Long> secondaryIdList = new ArrayList<>();
        for(SubjectAssignment tempSubjectAssignment : subjectAssignmentList){
            secondaryIdList.add(tempSubjectAssignment.getSecondaryId());
        }
        return secondaryIdList;
    }
    
    public int countAllMappingBySecondaryId(SubjectAssignment subjectAssignment){
        return subjectAssignmentFacade.countAllMappingBySecondaryId(subjectAssignment);
    }
    
     public int countAllMappingByPrimaryId(SubjectAssignment subjectAssignment){
        return subjectAssignmentFacade.countAllMappingByPrimaryId(subjectAssignment);
    }

}
