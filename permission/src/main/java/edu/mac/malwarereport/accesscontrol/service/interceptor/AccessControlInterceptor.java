/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.accesscontrol.service.interceptor;

import edu.mac.malwarereport.accesscontrol.service.permission.RolePermission;
import edu.mac.malwarereport.accesscontrol.service.resource.AccessControlCheck;
import edu.mac.malwarereport.permission.entity.Permission;
import jakarta.inject.Inject;
import jakarta.interceptor.AroundInvoke;
import jakarta.interceptor.Interceptor;
import jakarta.interceptor.InvocationContext;
import java.util.Arrays;

/**
 *
 * @author E
 */
@Interceptor
public class AccessControlInterceptor {

    @Inject
    private RolePermission rolePermission;
    
    @Inject 
    private AccessControlCheck accessControlCheck;


    
    public AccessControlInterceptor() {

    }

    //ADD CHECK PERMISSION 
    //Checks if user is from the same organisation
    @AroundInvoke
    public Object AccessControl(InvocationContext ctx) throws Exception {
        //get staffDTO parameter

        
        String functionLabel = Arrays.asList(Arrays.asList(ctx.getMethod().toGenericString().split(" ")).get(2).split("\\(")).get(0);
        for(Permission eachPermission : rolePermission.getAccountPermission()){
            if(eachPermission.getLabel().equalsIgnoreCase(functionLabel)){
                if(eachPermission.getScope().equals("ALL")){
                    System.out.print("Granted : All "+eachPermission.getLabel());
                    return ctx.proceed();
                }
                if(eachPermission.getScope().equals("INTERNAL")){
                    System.out.print("Check : Internal "+eachPermission.getLabel());
                    boolean internalCheck = true;
                    for(Object eachObject : ctx.getParameters()){
                        if(!accessControlCheck.checkScopeInternal(eachObject)){
                            internalCheck = false;
                        }
                    }
                    if(internalCheck){
                        System.out.print("Granted: Internal "+eachPermission.getLabel());
                        return ctx.proceed();
                    }
                }
                if(eachPermission.getScope().equals("SELF")){
                    //As of now only checks SELF for account
                    boolean internalCheck = true;
                    for(Object eachObject : ctx.getParameters()){
                        if(!accessControlCheck.checkScopeSelf(eachObject)){
                            internalCheck = false;
                        }
                    }
                    if(internalCheck){
                        System.out.print("Granted: Self "+eachPermission.getLabel());
                        return ctx.proceed();
                    }
                }
                
            }
            
        }
        System.out.print("Denied: "+functionLabel);
        return null;

    }
    
//    public Object Test(InvocationContext ctx) throws Exception {
//        //get staffDTO parameter
//        String functionLabel = Arrays.asList(Arrays.asList(ctx.getMethod().toGenericString().split(" ")).get(2).split("\\(")).get(0);
//        Category category = new Category("REMOVE");
//        
//        Permission permission = new Permission("NAME", functionLabel, category, "UNDEFINED", 1, "DESCRIPTION");
//        permissionFacade.create(permission);
////        Object[] parameters = ctx.getParameters();
////        Long organisationId = (long) parameters[0];
////        Long accountId = authenticate.getCurrentAccount().getId();
////        OwnershipAssignment ownershipAssignment = new OwnershipAssignment(organisationId, "org", accountId, "acc");
////        if(ownershipAssignmentManager.isMapped(ownershipAssignment)){
//            return ctx.proceed();
////        }
////            return MappingStatus.FAILURE;
//    }

}
