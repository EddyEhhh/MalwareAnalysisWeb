/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.accesscontrol.interceptor;

import edu.mac.malwarereport.accesscontrol.service.permission.RolePermission;
import edu.mac.malwarereport.account.subjectassignment.manager.SubjectRoleManager;
import edu.mac.malwarereport.permission.data.CategoryFacade;
import edu.mac.malwarereport.permission.entity.Permission;
import edu.mac.malwarereport.role.entity.Role;
import jakarta.inject.Inject;
import jakarta.interceptor.AroundInvoke;
import jakarta.interceptor.Interceptor;
import jakarta.interceptor.InvocationContext;
import java.util.List;

/**
 *
 * @author E
 */
@IsAdministrator
@Interceptor
public class IsAdministratorInterceptor {

    @Inject
    private RolePermission rolePermission;
    
    @Inject
    private SubjectRoleManager subjectRoleManager;
    
    @Inject
    private CategoryFacade categoryFacade;

    public IsAdministratorInterceptor() {

    }

    //ADD CHECK PERMISSION 
    //Checks if user is from the same organisation
    @AroundInvoke
    public Object IsAdministrator(InvocationContext ctx) throws Exception {
        //get staffDTO parameter
        List<Role> currentRole = subjectRoleManager.getAllCurrentRole();
        
        for(Role eachRole : rolePermission.getAllInheritedRole(currentRole)){
//            System.out.print(ctx.getMethod().toGenericString());
//            System.out.print("Checking for admin: " + eachRole.getName());
//            System.out.print("Compare: " + eachRole.getName());
            if(eachRole.getSuuid().equals("b3736a08-a1e3-4615-bc4c-db727b20a0ad")){
//                System.out.print("Granted");
                return ctx.proceed();
            }
        }
        //System.out.print("Denied");
        return null;

    }
    
//    public Object Test(InvocationContext ctx) throws Exception {
//        //get staffDTO parameter
//        String functionLabel = Arrays.asList(Arrays.asList(ctx.getMethod().toGenericString().split(" ")).get(2).split("\\(")).get(0);
//        Category category = new Category("REMOVE");
//        
//        Permission permission = new Permission("NAME", functionLabel, category, "UNDEFINED", 1, "DESCRIPTION");
//        permissionFacade.create(permission);
////        Object[] parameters = ctx.getParameters();
////        Long organisationId = (long) parameters[0];
////        Long accountId = authenticate.getCurrentAccount().getId();
////        OwnershipAssignment ownershipAssignment = new OwnershipAssignment(organisationId, "org", accountId, "acc");
////        if(ownershipAssignmentManager.isMapped(ownershipAssignment)){
//            return ctx.proceed();
////        }
////            return MappingStatus.FAILURE;
//    }

}
