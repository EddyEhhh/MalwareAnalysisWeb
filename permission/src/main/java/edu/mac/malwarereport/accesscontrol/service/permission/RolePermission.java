/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.accesscontrol.service.permission;

import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.subjectassignment.manager.SubjectRoleManager;
import edu.mac.malwarereport.permission.entity.Permission;
import edu.mac.malwarereport.role.dto.RoleDTO;
import edu.mac.malwarereport.role.entity.Role;
import edu.mac.malwarereport.role.permissionassignment.manager.RolePermissionManager;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class RolePermission {
    
    @Inject
    private SubjectRoleManager subjectRoleManager;
    
    @Inject
    private RolePermissionManager rolePermissionManager;
    
    @Inject
    private Authenticate authenticate;
    
    public boolean isPermitted(String permissionLabel) {
        for (Permission eachPermission : getAccountPermission()) {
            if (eachPermission.getLabel().equalsIgnoreCase(permissionLabel)) {
                System.out.print("Granted");
                return true;
            }
        }return false;
    }
    
    public List<Permission> getAccountPermission(){
        List<Role> currentRole = subjectRoleManager.getAllCurrentRole();
        List<Role> allRole = getAllInheritedRole(currentRole);
        return getAllPermission(allRole);
    }
    
    public List<Role> getAllInheritedRole(List<Role> currentRoles){
        List<Role> allRole = new ArrayList<>();
        for(Role eachRole : currentRoles){
            allRole.add(eachRole);
                List<Role> inheritance = new ArrayList<>();
                for(Role eachRole2 : eachRole.getInheritance(eachRole, inheritance)){
                    if(!rolesContainsSuuid(allRole, eachRole2.getSuuid())){
                        allRole.add(eachRole2);
                    }
                }
        }return allRole;
    }
    
    private List<Permission> getAllPermission(List<Role> roles) {
        List<Permission> allPermission = new ArrayList<>();
        for (Role eachRole : roles) {
            for (Permission eachPermission : rolePermissionManager.getAllPermissionByRole(eachRole)) {
                if (!permissionsContainsSuuid(allPermission, eachPermission.getSuuid())){
                    allPermission.add(eachPermission);
                    System.out.print("Permissions : " + eachPermission.getName());
                }
            }
        }return allPermission;

    }
    
    private boolean rolesContainsSuuid(List<Role> list, String suuid) {
        return list.stream().map(Role::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }
    
    private boolean permissionsContainsSuuid(List<Permission> list, String suuid) {
        return list.stream().map(Permission::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }
    
    
    
    
    
}
