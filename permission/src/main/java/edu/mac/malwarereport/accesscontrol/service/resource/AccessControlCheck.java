/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.accesscontrol.service.resource;

import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.data.AccountFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.report.data.SampleFacade;
import edu.mac.malwarereport.report.dto.SampleDTO;
import edu.mac.malwarereport.report.ownershipassignment.mapper.ReportOrganisationMapper;
import edu.mac.malwarereport.role.data.RoleFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import edu.mac.malwarereport.role.ownershipassignment.mapper.RoleOrganisationMapper;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class AccessControlCheck {
    
    String ACCOUNTDTO = "edu.mac.malwarereport.account.dto.AccountDTO";
    String SAMPLEDTO = "edu.mac.malwarereport.report.dto.SampleDTO";
    String ROLEDTO = "edu.mac.malwarereport.role.dto.RoleDTO";
    String ARRAYLIST = "java.util.ArrayList";
        
    @Inject
    private AccountOrganisationMapper accountOrganisationMapper;
    
    @Inject
    private RoleOrganisationMapper roleOrganisationMapper;

    @Inject
    private ReportOrganisationMapper reportOrganisationMapper;
    
    @Inject
    private AccountFacade accountFacade;
    
    @Inject
    private SampleFacade sampleFacade;
    
    @Inject
    private RoleFacade roleFacade;
    
    @Inject
    private Authenticate authenticate;
    
    public boolean checkScopeInternal(Object object){
        Long accountId = authenticate.getCurrentAccount().getId();
        Long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        String objectName = object.getClass().getName();
        System.out.print(objectName + " : " + ACCOUNTDTO);
        if(objectName.equalsIgnoreCase(ACCOUNTDTO)){
            AccountDTO accountDTO = (AccountDTO) object;
            Long id = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
            if(accountOrganisationMapper.isMappingExist(organisationId, id)){
            return true;
            }
        }else if(objectName.equalsIgnoreCase(SAMPLEDTO)){
            SampleDTO sampleDTO = (SampleDTO) object;
            Long id = sampleFacade.getSampleBySuuid(sampleDTO.getSuuid()).getId();
            if(reportOrganisationMapper.isMappingExist(organisationId, id)){
            return true;
            }
        }else if(objectName.equalsIgnoreCase(ROLEDTO)){
            RoleDTO roleDTO = (RoleDTO) object;
            Long id = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
            if(roleOrganisationMapper.isRoleInOrganisation(organisationId, id)){
                return true;
            }
        }
        return false;
    }
    
    public boolean checkScopeSelf(Object object){
        Long accountId = authenticate.getCurrentAccount().getId();
        String objectName = object.getClass().getName();
        if(objectName.equalsIgnoreCase(ACCOUNTDTO)){
            AccountDTO accountDTO = (AccountDTO) object;
            Long id = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
            if(id.equals(accountId)){
                return true;
            }
        }
        return false;
    }
    
}
