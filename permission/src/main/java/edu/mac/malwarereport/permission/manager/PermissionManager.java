/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.permission.manager;

import edu.mac.malwarereport.accesscontrol.service.permission.RolePermission;
import edu.mac.malwarereport.permission.data.PermissionFacade;
import edu.mac.malwarereport.permission.dto.PermissionDTO;
import edu.mac.malwarereport.permission.entity.Permission;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Stateless
public class PermissionManager {
      
    @Inject
    private PermissionFacade permissionFacade;
    
    public PermissionDTO findByID(long id){
        Permission permission = permissionFacade.find(id);
        return permission.toDTO();
    }
     
    public PermissionDTO findBySuuid(String suuid){
         Permission permission = permissionFacade.getPermissionBySuuid(suuid);
         return permission.toDTO();
     }
    
    public List<PermissionDTO> findAll(){
        List<Permission> permissionList = permissionFacade.findAll();
        List<PermissionDTO> permissionDTOList = new ArrayList<>();
        for(Permission permisson : permissionList){
            permissionDTOList.add(permisson.toDTO());
        }
        return permissionDTOList;
    }
    
    public List<PermissionDTO> findAllAdminAvailablePermission(){
        List<Permission> permissionList = permissionFacade.findAll();
        List<PermissionDTO> permissionDTOList = new ArrayList<>();
        for(Permission permisson : permissionList){
            if(permisson.getScope() == "ALL"){
                permissionDTOList.add(permisson.toDTO());
            }
        }return permissionDTOList;
    }
    
    public List<PermissionDTO> findAllUserAvailablePermission(){
    List<Permission> permissionList = permissionFacade.findAll();
        List<PermissionDTO> permissionDTOList = new ArrayList<>();
        for(Permission permisson : permissionList){
            if(permisson.getScope().equals("SELF") || permisson.getScope().equals("INTERNAL")){
                if(permisson.getCategory().getName().equals("OTHER")){
                    permissionDTOList.add(permisson.toDTO());
                }
            }
        }return permissionDTOList;
    }
    
    public List<PermissionDTO> findAllManagerAvailablePermission(){
    List<Permission> permissionList = permissionFacade.findAll();
        List<PermissionDTO> permissionDTOList = new ArrayList<>();
        for(Permission permisson : permissionList){
            if(permisson.getScope().equals("ALL")){
                if(permisson.getCategory().getName().equals("RBAC")){
                    permissionDTOList.add(permisson.toDTO());
                }
            }
        }return permissionDTOList;
    }
   
    public void create(PermissionDTO permissionDTO){
        Permission permission = permissionDTO.toObject();
        permissionFacade.create(permission);
    }
    
    public void update(PermissionDTO permissionDTO){
        String suuid = permissionDTO.getSuuid();
        Permission currentPermission = permissionFacade.getPermissionBySuuid(suuid);
        String name = permissionDTO.getName();
        String label = permissionDTO.getLabel();
        String description = permissionDTO.getDescription();
        currentPermission.setName(name);
        currentPermission.setLabel(label);
        currentPermission.setDescription(description);
        permissionFacade.edit(currentPermission);
    }
    
    @Inject
    private RolePermission rolePermission;
    
    public boolean hasPermission(String permissionLabel, String Scope){
    for(Permission eachPermission : rolePermission.getAccountPermission()){
            System.out.print("Checking: " + eachPermission.getName());
            System.out.print("Compare: " + eachPermission.getLabel() + "  " + permissionLabel);
            if(eachPermission.getLabel().equalsIgnoreCase(permissionLabel)){
                if(eachPermission.getScope().equalsIgnoreCase(Scope)){
                    System.out.print("Grant perm");
                    return true;   
                }
            }
        }System.out.print("Denied perm");
        return false;
    }
    
}
