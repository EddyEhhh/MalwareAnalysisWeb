/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.permission.applicationFacade;

import edu.mac.malwarereport.accesscontrol.interceptor.IsAdministratorInterceptor;
import edu.mac.malwarereport.accesscontrol.interceptor.IsPermittedInterceptor;
import edu.mac.malwarereport.permission.manager.*;
import edu.mac.malwarereport.permission.data.PermissionFacade;
import edu.mac.malwarereport.permission.dto.PermissionDTO;
import edu.mac.malwarereport.permission.entity.Permission;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.interceptor.Interceptors;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 *
 * @author tohyu
 */
@Stateless

public class PermissionApplicationFacade {
      
    @Inject
    private PermissionManager permissionManager;
     
    @Interceptors({IsAdministratorInterceptor.class})
    public PermissionDTO findBySuuid(String suuid){
         return permissionManager.findBySuuid(suuid);
     }
    
    @Interceptors({IsAdministratorInterceptor.class})
    public List<PermissionDTO> findAll(){
        return permissionManager.findAll();
    }
    
    @Interceptors({IsAdministratorInterceptor.class})
    public List<PermissionDTO> findAllAdminAvailablePermission(){
        return permissionManager.findAllAdminAvailablePermission();
    }
    
    //Permission: no 
    public List<PermissionDTO> findAllUserAvailablePermission(){
        return permissionManager.findAllUserAvailablePermission();
    }
    
    @Interceptors({IsAdministratorInterceptor.class})
    public List<PermissionDTO> findAllManagerAvailablePermission(){
        return permissionManager.findAllManagerAvailablePermission();
    }
    
    @Interceptors({IsAdministratorInterceptor.class})
    public void update(PermissionDTO permissionDTO){
        permissionManager.update(permissionDTO);
    } 
    
    public boolean hasPermission(String permissionLabel, String scope){
        return permissionManager.hasPermission(permissionLabel, scope);
    }
    
}
