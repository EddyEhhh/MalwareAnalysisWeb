/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.permissionassignment.data;

import edu.mac.malwarereport.permissionassignment.entity.PermissionAssignment;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Stateless
public class PermissionAssignmentFacade extends AbstractFacade<PermissionAssignment> {
    @PersistenceContext(unitName = "permissionassignmentPU")
    private EntityManager em;
    
    @Override
    protected EntityManager getEntityManager(){
        return em;
    }
    
    public PermissionAssignmentFacade(){
        super(PermissionAssignment.class);
    }
    
    public PermissionAssignment getPermissionAssignment(PermissionAssignment permissionAssignment){
        long primaryId = permissionAssignment.getPrimaryId();
        long secondaryId = permissionAssignment.getSecondaryId();
        return getEntityManager().createNamedQuery("PermissionAssignment.byAll", PermissionAssignment.class)
                .setParameter("primaryId", primaryId)
                .setParameter("secondaryId", secondaryId)
                .getSingleResult();
    }

    
    public boolean mappingExist(PermissionAssignment permissionAssignment){
        long primaryId = permissionAssignment.getPrimaryId();
        long secondaryId = permissionAssignment.getSecondaryId();
        return !getEntityManager().createNamedQuery("PermissionAssignment.byAll", PermissionAssignment.class)
                .setParameter("primaryId", primaryId)
                .setParameter("secondaryId", secondaryId)
                .getResultList().isEmpty();
    }
    
    //Check if account already has role
    public boolean mappingExistByPrimaryId(PermissionAssignment permissionAssignment){
        long primaryId = permissionAssignment.getPrimaryId();
        return !getEntityManager().createNamedQuery("PermissionAssignment.byPrimaryId", PermissionAssignment.class)
                .setParameter("primaryId", primaryId)
                .getResultList().isEmpty();
    }
    
    //Check if role is used
    public boolean mappingExistBySecondaryId(PermissionAssignment permissionAssignment){
        long secondaryId = permissionAssignment.getSecondaryId();
        return !getEntityManager().createNamedQuery("PermissionAssignment.bySecondaryId", PermissionAssignment.class)
                .setParameter("secondaryId", secondaryId)
                .getResultList().isEmpty();
    }
    
    //Using account find role
    public List<PermissionAssignment> getAllMappingByPrimaryId(PermissionAssignment permissionAssignment){
        long primaryId = permissionAssignment.getPrimaryId();
        return getEntityManager().createNamedQuery("PermissionAssignment.byPrimaryId", PermissionAssignment.class)
                .setParameter("primaryId", primaryId)
                .getResultList();
    }
    
    //Using role find all account
    public List<PermissionAssignment> getAllMappingBySecondaryId(PermissionAssignment permissionAssignment){
        long secondaryId = permissionAssignment.getSecondaryId();
        return getEntityManager().createNamedQuery("PermissionAssignment.bySecondaryId", PermissionAssignment.class)
                .setParameter("secondaryId", secondaryId)
                .getResultList();
    }
    
    public int countAllMappingBySecondaryId(PermissionAssignment permissionAssignment){
        long secondaryId = permissionAssignment.getSecondaryId();
        return getEntityManager().createNamedQuery("PermissionAssignment.bySecondaryId", PermissionAssignment.class)
                .setParameter("secondaryId", secondaryId)
                .getResultList().size();
    }
    
    public int countAllMappingByPrimaryId(PermissionAssignment permissionAssignment){
        long primaryId = permissionAssignment.getPrimaryId();
        return getEntityManager().createNamedQuery("PermissionAssignment.byPrimaryId", PermissionAssignment.class)
                .setParameter("primaryId", primaryId)
                .getResultList().size();
    }
    
}
