/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.permissionassignment.manager;

import edu.mac.malwarereport.permissionassignment.data.PermissionAssignmentFacade;
import edu.mac.malwarereport.permissionassignment.dto.PermissionAssignmentDTO;
import edu.mac.malwarereport.permissionassignment.entity.PermissionAssignment;
import edu.mac.malwarereport.permissionassignment.outputInfo.CreateMappingStatus;
import edu.mac.malwarereport.permissionassignment.outputInfo.DeleteMappingStatus;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Stateless
public class PermissionAssignmentManager {
    
    @Inject
    private PermissionAssignmentFacade permissionAssignmentFacade;
    
    public CreateMappingStatus create(PermissionAssignment permissionAssignment){
        if(!permissionAssignmentFacade.mappingExist(permissionAssignment)){
            try{
                permissionAssignmentFacade.create(permissionAssignment);
                return CreateMappingStatus.SUCCESS;
            } catch (Exception e){
                return CreateMappingStatus.ERROR;
            }
        }else{
            return CreateMappingStatus.EXIST;
        }
    }
    
    public DeleteMappingStatus delete(PermissionAssignment permissionAssignment){
        try{
        if(permissionAssignmentFacade.getPermissionAssignment(permissionAssignment)!=null){
            permissionAssignment = permissionAssignmentFacade.getPermissionAssignment(permissionAssignment);
            permissionAssignmentFacade.remove(permissionAssignment);
            return DeleteMappingStatus.SUCCESS;
        }else{
            return DeleteMappingStatus.ERROR_NOT_FOUND;
        }
        }catch (Exception e){
            return DeleteMappingStatus.ERROR;
        }
        
    }
    
    //DELETE ALL PERMISSION FROM ROLE
    public DeleteMappingStatus deleteAllByPrimary(PermissionAssignment permissionAssignment){
        try{
        if(permissionAssignmentFacade.getAllMappingByPrimaryId(permissionAssignment)!=null){
            for(PermissionAssignment deletePermissionAssignment : permissionAssignmentFacade.getAllMappingByPrimaryId(permissionAssignment)){
                permissionAssignmentFacade.remove(deletePermissionAssignment);
            }
            return DeleteMappingStatus.SUCCESS;
        }else{
            return DeleteMappingStatus.ERROR_NOT_FOUND;
        }
        }catch (Exception e){
            return DeleteMappingStatus.ERROR;
        }
        
    }
    
    
    public boolean isPrimaryMapped(PermissionAssignment permissionAssignment){
        return permissionAssignmentFacade.mappingExistByPrimaryId(permissionAssignment);
    }
    
    public boolean isSecondaryMapped(PermissionAssignment permissionAssignment){
        return permissionAssignmentFacade.mappingExistBySecondaryId(permissionAssignment);
    }
    
    public boolean isMapped(PermissionAssignment permissionAssignment){
        return permissionAssignmentFacade.mappingExist(permissionAssignment);
    }
    
    //GET ALL ACCOUNT OF SPECIFIC ROLE
    public List<Long> getAllPrimaryId(PermissionAssignment permissionAssignment){
        List<PermissionAssignment> permissionAssignmentList = permissionAssignmentFacade.getAllMappingBySecondaryId(permissionAssignment);
        List<Long> primaryIdList = new ArrayList<>();
        for(PermissionAssignment tempPermissionAssignment : permissionAssignmentList){
                primaryIdList.add(tempPermissionAssignment.getPrimaryId());
        }
        return primaryIdList;
    }
    
    //GET ALL ROLE OF SPECIFIC ACCOUNT
    public List<Long> getAllSecondaryId(PermissionAssignment permissionAssignment){
        List<PermissionAssignment> permissionAssignmentList = permissionAssignmentFacade.getAllMappingByPrimaryId(permissionAssignment);
        List<Long> secondaryIdList = new ArrayList<>();
        for(PermissionAssignment tempPermissionAssignment : permissionAssignmentList){
            secondaryIdList.add(tempPermissionAssignment.getSecondaryId());
        }
        return secondaryIdList;
    }
    
    public int countAllMappingBySecondaryId(PermissionAssignment permissionAssignment){
        return permissionAssignmentFacade.countAllMappingBySecondaryId(permissionAssignment);
    }
    
     public int countAllMappingByPrimaryId(PermissionAssignment permissionAssignment){
        return permissionAssignmentFacade.countAllMappingByPrimaryId(permissionAssignment);
    }
   
}
