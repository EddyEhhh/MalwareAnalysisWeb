/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.personnel.manager;

import edu.mac.malwarereport.ownership.data.OwnershipAssignmentFacade;
import edu.mac.malwarereport.ownership.outputinfo.DeleteMappingStatus;
import edu.mac.malwarereport.ownership.outputinfo.MappingStatus;
import edu.mac.malwarereport.personnel.entity.OwnershipAssignment;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Stateless
public class OwnershipAssignmentManager {
    
    @Inject
    private OwnershipAssignmentFacade ownershipAssignmentFacade;
    
    public MappingStatus create(OwnershipAssignment ownershipAssignment){
        if(!ownershipAssignmentFacade.mappingExist(ownershipAssignment)){
            try{
                ownershipAssignmentFacade.create(ownershipAssignment);
                return MappingStatus.SUCCESS;
            } catch (Exception e){
                return MappingStatus.FAILURE;
            }
        }else{
            return MappingStatus.EXIST;
        }
    }
    
    public boolean delete(OwnershipAssignment ownershipAssignment){
        if(ownershipAssignmentFacade.getOwnershipAssignment(ownershipAssignment)!=null){
            ownershipAssignment = ownershipAssignmentFacade.getOwnershipAssignment(ownershipAssignment);
            ownershipAssignmentFacade.remove(ownershipAssignment);
            return true;
        }else{
            return false;
        }
        
    }
    
    public boolean deleteByPrimary(OwnershipAssignment ownershipAssignment){
        if(ownershipAssignmentFacade.getMappingByPrimaryId(ownershipAssignment)!=null){
            ownershipAssignment = ownershipAssignmentFacade.getMappingByPrimaryId(ownershipAssignment);
            ownershipAssignmentFacade.remove(ownershipAssignment);
            return true;
        }else{
            return false;
        }
        
    }
    
    public boolean deleteBySecondary(OwnershipAssignment ownershipAssignment){
        if(ownershipAssignmentFacade.getMappingBySecondaryId(ownershipAssignment)!=null){
            ownershipAssignment = ownershipAssignmentFacade.getMappingBySecondaryId(ownershipAssignment);
            ownershipAssignmentFacade.remove(ownershipAssignment);
            return true;
        }else{
            return false;
        }
        
    }
    
    public boolean isMapped(OwnershipAssignment ownershipAssignment){
        return ownershipAssignmentFacade.mappingExist(ownershipAssignment);
    }
    
    public Long getPrimaryId(OwnershipAssignment ownershipAssignment){
        return ownershipAssignmentFacade.getMappingBySecondaryId(ownershipAssignment).getPrimaryId();
    }
    
    public List<Long> getAllPrimaryId(OwnershipAssignment ownershipAssignment){
        List<Long> primaryIdList = new ArrayList<>();
        for (OwnershipAssignment tempOwnershipAssignment : ownershipAssignmentFacade.getAllMappingBySecondaryId(ownershipAssignment)){
            primaryIdList.add(tempOwnershipAssignment.getId());
        }
        return primaryIdList;
    }
    
    public Long getSecondaryId(OwnershipAssignment ownershipAssignment){
        return ownershipAssignmentFacade.getMappingByPrimaryId(ownershipAssignment).getSecondaryId();
    }

    public List<Long> getAllSecondaryId(OwnershipAssignment ownershipAssignment){
        List<Long> secondaryIdList = new ArrayList<>();
        for(OwnershipAssignment tempOwnershipAssignment : ownershipAssignmentFacade.getAllMappingByPrimaryId(ownershipAssignment)){
            secondaryIdList.add(tempOwnershipAssignment.getSecondaryId());
        }
        return secondaryIdList;
    }
    
    public int countAllMappingByPrimaryId(OwnershipAssignment ownershipAssignment){
        return ownershipAssignmentFacade.countAllMappingByPrimaryId(ownershipAssignment);
    }
    
    public int countAllMappingBySecondaryId(OwnershipAssignment ownershipAssignment){
        return ownershipAssignmentFacade.countAllMappingBySecondaryId(ownershipAssignment);
    }
    
    public DeleteMappingStatus deleteAllByPrimaryOnly(OwnershipAssignment ownershipAssignment){
        try{
        for(OwnershipAssignment eachOwnershipAssignment : ownershipAssignmentFacade.getAllMappingByPrimaryOnly(ownershipAssignment)){
            ownershipAssignmentFacade.remove(eachOwnershipAssignment);
        }
        return DeleteMappingStatus.SUCCESS;
        }catch (Exception E){
            return DeleteMappingStatus.ERROR;
        }
    }
    
    
//    public OwnershipAssignmentDTO findbyID(long id){
//        OwnershipAssignment personnel = personnelFacade.find(id);
//        return personnel.toDTO();
//    }
    
//    public List<OwnershipAssignmentDTO> findAll(){
//        List<OwnershipAssignment> personnelList = personnelFacade.findAll();
//        List<OwnershipAssignmentDTO> personnelDTOList = new ArrayList<>();
//        for(int i = 0; i < personnelList.size(); i++){
//            OwnershipAssignmentDTO tempPersonnel = personnelList.get(i).toDTO();
//            personnelDTOList.add(tempPersonnel);
//        }
//        return personnelDTOList;
//    }
    
//    public void createPersonnel(OwnershipAssignmentDTO personnelDTO){
//        OwnershipAssignment personnel = personnelDTO.toPersonnel();
//        personnelFacade.create(personnel);
//    }
    
    //update personnel
    
    
    //delete personnel
    
}
