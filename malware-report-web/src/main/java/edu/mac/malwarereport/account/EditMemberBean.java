/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account;

import edu.mac.malwarereport.account.applicationFacade.AccountApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.ReadAccountApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.SubjectRoleApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.ERROR;
import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.SUCCESS;
import edu.mac.malwarereport.account.web.RedirectBean;
import edu.mac.malwarereport.role.applicationFacade.RoleOrganisationApplicationFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.context.Flash;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletRequest;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.PrimeFaces;

/**
 *
 * @author Jaibun Thana
 */

@Named("editMemberBean")
@ViewScoped
public class EditMemberBean implements Serializable{

    
    @Inject
    private AccountApplicationFacade accountApplicationFacade;
    
    @Inject
    private ReadAccountApplicationFacade readAccountApplicationFacade;
    
    @Inject
    private RoleOrganisationApplicationFacade roleOrganiastionApplicationFacade;
    
    @Inject
    private RedirectBean redirectBean;
    
    @Inject
    private FacesContext facesContext;
    
    private PrimeFaces primeFaces = PrimeFaces.current();
    
    @Inject
    private SubjectRoleApplicationFacade subjectRoleApplicationFacade;
        
    private List<String> roles = new ArrayList<String>();
    
    private List<RoleDTO> disabledAvailableRoles = new ArrayList<RoleDTO>();
    
    private List<RoleDTO> indirectInheritedRole = new ArrayList<>();
    
    private List<RoleDTO> availableRoles = new ArrayList<RoleDTO>();
    
    private List<RoleDTO> currentRole = new ArrayList<RoleDTO>();

    
    private AccountDTO selectedAccount = new AccountDTO();
    

    
    @PostConstruct
    public void init(){
        HttpServletRequest req = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
        //this is to request the 'id' which is the variable at the end on the url 
    try{
        if(!req.getParameter("id").isBlank()){
            String id = (req.getParameter("id"));
            //find the report by the 'id'
            AccountDTO accountDTO = new AccountDTO();
            accountDTO.setSuuid(id);
            selectedAccount = readAccountApplicationFacade.findBySuuid(accountDTO);
            availableRoles = roleOrganiastionApplicationFacade.getRoleList();
            //availableRole = subjectRoleManager.getAllCurrentAuthorisedRole();
            List<RoleDTO> userRole = subjectRoleApplicationFacade.getAllRoleByAccount(selectedAccount);
            //Preset currently existing role
            for(RoleDTO allRole : availableRoles){
                for(RoleDTO allCurrent : userRole){
                    if(allRole.getSuuid().equals(allCurrent.getSuuid())){
                        currentRole.add(allRole);
                    }
                }
            }
            onSelectRole();
    }
    }catch (Exception e){
        System.out.print("EditMemberBean Init Error");
    }
        
    }
    
    public void onSelectRole(){
        indirectInheritedRole = new ArrayList<>();
        for(RoleDTO eachCurrentRole : currentRole){
            List<RoleDTO> indirectInheritedRoleCheck = subjectRoleApplicationFacade.getAllIndirectInheritance(eachCurrentRole);
            for(RoleDTO eachInheritRole : indirectInheritedRoleCheck){
                if(!containsName(indirectInheritedRole, eachInheritRole.getSuuid())){
                    indirectInheritedRole.add(eachInheritRole);
//                    for(RoleDTO eachAvailableRole:availableRoles){
//                        if(eachAvailableRole.getSuuid()==eachInheritRole.getSuuid()){
//                            availableRoles.remove(eachAvailableRole);
//                            break;
//                        }
//                    }
                }
            
            }
        }
        
    }
    
    public boolean containsName(final List<RoleDTO> list, final String suuid){
    return list.stream().map(RoleDTO::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }
    
    public void updateMember() throws Exception{
        System.out.print("TESTING2");
        facesContext = FacesContext.getCurrentInstance();
        Flash flash = facesContext.getExternalContext().getFlash();
        flash.setKeepMessages(true);
        System.out.print(selectedAccount.getSuuid());
        switch (accountApplicationFacade.updateAccount(selectedAccount)){
            case SUCCESS:
                facesContext.addMessage("selectedAccount:growl", new FacesMessage(FacesMessage.SEVERITY_INFO, "Details updated", null));
                redirectBean.viewMemberArgs(selectedAccount.getSuuid());
                break;
            case ERROR:
            default:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                break;
        }
    }
    
    public void updateMemberRole() throws Exception{
        if(currentRole.size()>0){
        switch (subjectRoleApplicationFacade.createMultiMapping(selectedAccount, currentRole)){
            case SUCCESS:
                facesContext = FacesContext.getCurrentInstance();
                Flash flash = facesContext.getExternalContext().getFlash();
                flash.setKeepMessages(true);
                facesContext.addMessage("selectedAccount:growl", new FacesMessage(FacesMessage.SEVERITY_INFO, "Role updated", null));
                redirectBean.viewMemberArgs(selectedAccount.getSuuid());
                break;
            case OBJECT_UNFETCHABLE:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "One or more role seem to be missing!", null));
                break;
            case ERROR:
            case FAILURE:
            default:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                break;
        }
        }else{
            facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "User must have at least 1 role", null));
        }
    }
    
//    public RoleDTO getAvailableRole(String suuid){
//        if(suuid==""){
//            throw new IllegalArgumentException("no suuid");
//        }
//        for(RoleDTO roleDTO : availableRoles){
//            if(roleDTO.getSuuid() == suuid){
//                return roleDTO;
//            }
//        }return null;
//    }
    
    /**
     * @return the accountDTO
     */
    public AccountDTO getSelectedAccount() {
        return selectedAccount;
    }

    /**
     * @param accountDTO the accountDTO to set
     */
    public void setSelectedAccount(AccountDTO selectedAccount) {
        this.selectedAccount = selectedAccount;
    }
    
    /**
     * @return the roles
     */
    public List<String> getRoles() {
        return roles;
    }

    /**
     * @param roles the roles to set
     */
    public void setRoles(List<String> roles) {
        this.roles = roles;
    }

    /**
     * @return the selectedRole
     */
    public List<RoleDTO> getAvailableRoles() {
        return availableRoles;
    }

    /**
     * @param selectedRole the selectedRole to set
     */
    public void setAvailableRoles(List<RoleDTO> availableRoles) {
        this.availableRoles = availableRoles;
    }

    /**
     * @return the currentRole
     */
    public List<RoleDTO> getCurrentRole() {
        return currentRole;
    }

    /**
     * @param currentRole the currentRole to set
     */
    public void setCurrentRole(List<RoleDTO> currentRole) {
        this.currentRole = currentRole;
    }

    /**
     * @return the indirectInheritedRole
     */
    public List<RoleDTO> getIndirectInheritedRole() {
        return indirectInheritedRole;
    }

    /**
     * @param indirectInheritedRole the indirectInheritedRole to set
     */
    public void setIndirectInheritedRole(List<RoleDTO> indirectInheritedRole) {
        this.indirectInheritedRole = indirectInheritedRole;
    }
    
    
}
