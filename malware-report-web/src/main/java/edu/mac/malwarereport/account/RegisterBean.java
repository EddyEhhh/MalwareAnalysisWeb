/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.mac.malwarereport.account;

import edu.mac.malwarereport.account.applicationFacade.AccountApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.SubjectRoleApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import static edu.mac.malwarereport.account.outputInfo.RegisterStatus.EMAIL_EXIST;
import edu.mac.malwarereport.account.web.RedirectBean;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import edu.mac.malwarereport.role.applicationFacade.RoleOrganisationApplicationFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.PrimeFaces;

/**
 *
 * @author Jaibun Thana
 */
@Named
@ViewScoped
public class RegisterBean implements Serializable {

    private static final long serialVersionUID = 1L;

    @Inject
    private AccountApplicationFacade accountApplicationFacade;
    
    @Inject
    private SubjectRoleApplicationFacade subjectRoleApplicationFacade;
    
    @Inject
    private FacesContext facesContext;
    
    @Inject
    private RoleOrganisationApplicationFacade roleOrganisationApplicationFacade;
    
    @Inject
    private AccountOrganisationApplicationFacade accountOrganisationApplicationFacade;
    
    private PrimeFaces primeFaces = PrimeFaces.current();

    private AccountDTO accountDTO = new AccountDTO();
    
    private List<RoleDTO> availableRole = new ArrayList<>();
    
    
    private List<RoleDTO> selectedRole = new ArrayList<>();
    
    private List<RoleDTO> inheritedRole = new ArrayList<>();
    
    private String disabledCreateMember;
    
    @PostConstruct
    public void showAvailableRole(){
        availableRole = roleOrganisationApplicationFacade.getRoleList();
        checkMaxCreateMember();
    }
    
    public void checkMaxCreateMember() {
        if (accountOrganisationApplicationFacade.isMemberMax()) {
            setDisabledCreateMember("true");
        } else {
            setDisabledCreateMember("false");
        }
    }
    
//    //Setters and Getters
//    public void register() throws Exception {
////        if (accountDTO.getPassword().isEmpty()) {
////                        System.out.print("dis working");
//            switch (accountManager.register(accountDTO, selectedRole)) {
//                case EMAIL_EXIST:
//                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "User already exist", null));
//                    break;
////                case EMAIL_FAILED:
////                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Unable to create user: Emailer failed", null));
////                    break;
//                case FAILURE:
//                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "An error has occured while creating user", null));
//                    break;
//                case SUCCESS:
//                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "User registered", null));
//                    break;
//            default:
//                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
//                    break;
//            }
////        }else{
////            facesContext.addMessage("registerForm:confirmPassword", new FacesMessage(FacesMessage.SEVERITY_INFO, "Password does not match", null));
////        }
//
//    }
    
    public void registerToOrganisation() throws Exception{
        if(selectedRole.size()==0){
            facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "No role selected", null));
            primeFaces.ajax().update("createMemberPanel");
            return;
        }
        switch (accountApplicationFacade.register(accountDTO, selectedRole)){
            case EMAIL_EXIST:
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "User already exist", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
            case FAILURE:
                    facesContext.addMessage("createMemberMessage", new FacesMessage(FacesMessage.SEVERITY_ERROR, "An error has occured while creating user", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
            case SUCCESS:
                    checkMaxCreateMember();
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "User registered", null));
                    accountDTO = new AccountDTO();
                    inheritedRole = new ArrayList<>();
                    primeFaces.ajax().update("memberForm");
                    primeFaces.executeScript("PF('addMemberDialog').hide();");
                    primeFaces.ajax().update("createMemberForm");
                    break;
            default:
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
        }
    }

    public void onSelectRole(){
        inheritedRole = new ArrayList<>();
        for(RoleDTO eachCurrentRole : selectedRole){
            List<RoleDTO> indirectInheritedRoleCheck = subjectRoleApplicationFacade.getAllIndirectInheritance(eachCurrentRole);
            for(RoleDTO eachInheritRole : indirectInheritedRoleCheck){
                if(!containsName(inheritedRole, eachInheritRole.getSuuid())){
                    inheritedRole.add(eachInheritRole);
//                    for(RoleDTO eachAvailableRole:availableRoles){
//                        if(eachAvailableRole.getSuuid()==eachInheritRole.getSuuid()){
//                            availableRoles.remove(eachAvailableRole);
//                            break;
//                        }
//                    }
                }
            
            }
        }
        
    }
    
    public boolean containsName(final List<RoleDTO> list, final String suuid){
    return list.stream().map(RoleDTO::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }
    
    //getters and setters
    public AccountDTO getAccountDTO() {
        return accountDTO;
    }

    public void setAccountDTO(AccountDTO accountDTO) {
        this.accountDTO = accountDTO;
    }

    /**
     * @return the availableRole
     */
    public List<RoleDTO> getAvailableRole() {
        return availableRole;
    }

    /**
     * @param availableRole the availableRole to set
     */
    public void setAvailableRole(List<RoleDTO> availableRole) {
        this.availableRole = availableRole;
    }

    /**
     * @return the selectedRole
     */
    public List<RoleDTO> getSelectedRole() {
        return selectedRole;
    }

    /**
     * @param selectedRole the selectedRole to set
     */
    public void setSelectedRole(List<RoleDTO> selectedRole) {
        this.selectedRole = selectedRole;
    }

    /**
     * @return the inheritedRole
     */
    public List<RoleDTO> getInheritedRole() {
        return inheritedRole;
    }

    /**
     * @param inheritedRole the inheritedRole to set
     */
    public void setInheritedRole(List<RoleDTO> inheritedRole) {
        this.inheritedRole = inheritedRole;
    }

    /**
     * @return the disabledCreateMember
     */
    public String getDisabledCreateMember() {
        return disabledCreateMember;
    }

    /**
     * @param disabledCreateMember the disabledCreateMember to set
     */
    public void setDisabledCreateMember(String disabledCreateMember) {
        this.disabledCreateMember = disabledCreateMember;
    }

}

