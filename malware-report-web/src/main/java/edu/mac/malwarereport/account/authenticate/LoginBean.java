/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.mac.malwarereport.account.authenticate;

import edu.mac.malwarereport.accessControl.PagePermission;
import edu.mac.malwarereport.account.applicationFacade.AuthenticateApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.AuthenticateSecurityApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.SubjectRoleApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import static edu.mac.malwarereport.account.outputInfo.AuthenticateStatus.DELETED;
import static edu.mac.malwarereport.account.outputInfo.AuthenticateStatus.LOCKOUT;
import static edu.mac.malwarereport.account.outputInfo.AuthenticateStatus.NOT_VERIFIED;
import edu.mac.malwarereport.account.web.RedirectBean;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.ExternalContext;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.security.enterprise.AuthenticationStatus;
import jakarta.security.enterprise.SecurityContext;
import jakarta.security.enterprise.authentication.mechanism.http.AuthenticationParameters;
import jakarta.security.enterprise.credential.Credential;
import jakarta.security.enterprise.credential.Password;
import jakarta.security.enterprise.credential.UsernamePasswordCredential;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.constraints.NotBlank;
import java.io.IOException;


/**
 *
 * @author Jaibun Thana
 */
@Named
@RequestScoped
public class LoginBean implements Serializable {

    private static final long serialVersionUID = 1L;
    
    @NotBlank
    private String email;
    
    @NotBlank
    private String password;
    
//    
//    public void login(){
//        staffManager.register(getStaffLoginDTO());
//    }
    
    @Inject
    private FacesContext facesContext;
    
    @Inject
    private RedirectBean redirectBean;
    
    @Inject
    private SecurityContext securityContext;
    
    @Inject
    private AuthenticateSecurityApplicationFacade authenticateSecurityApplicationFacade;
    
    @Inject
    private AuthenticateApplicationFacade authenticateApplicationFacade;
    
    private AccountDTO selectedAccount;
    

    //getters and setters

    /**
     * @return the staffLoginDTO
     */
    
    private ExternalContext getExternalContext(){
        return facesContext.getExternalContext();
    }
    
        //Init login
    public void login() throws Exception{
       // captcha();
        authenticate();
    }
    
//    public boolean captcha() throws IOException{
//        HttpServletRequest req = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
//        String gRecaptchaResponse = req.getParameter("g-recaptcha-response");
//		//System.out.println(gRecaptchaResponse);
//        boolean verify = authenticateManager.isCaptcha(gRecaptchaResponse); 
//        return verify;
//    }
    
    @Inject
    private PagePermission pagePermission;
    
    @Inject
    private SubjectRoleApplicationFacade subjectRoleApplicationFacade;
    //AUTHENTICATE to application
    private void authenticate() throws IOException{
        try{
           // if (captcha() == true){                
           
            
                switch(authenticateApplicationFacade.tryAuthorise(email)){
                    case NOT_VERIFIED:
                        facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Please verify your email", null));
                        break;
                    case LOCKOUT:
                        facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Your account has been locked out", null));
                        break;
                    case SUCCESS:
                    if(authenticateApplicationFacade.isCredentialValid(email, password)){
                        switch(processAuthentication()){
                            case SEND_CONTINUE:
                                System.out.print("A1");
                                facesContext.responseComplete();
                                break;
                            case SUCCESS:
                                System.out.print("A2");
                                authenticateSecurityApplicationFacade.resetLoginAttempts(email);
                                pagePermission.redirectHome();  
                                break;
                            case SEND_FAILURE:
                                System.out.print("A3");
                            case NOT_DONE:
                                authenticateSecurityApplicationFacade.failedLogin(email);
                                System.out.print("A4");
                                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid credentials", null));
                                break;
                            default:
                                System.out.print("A5");
                                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                                break;
                        }
                        }else{
                            authenticateSecurityApplicationFacade.failedLogin(email);
                               facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid credentials", null));
                               break;
                        }
                    case DELETED:
                    default:
                        facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid credentials", null));
                        break;
                }
            
           //  }
        } catch (Exception e) {
            facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
        }

    }
    
//    public void failedLogin(AccountDTO account){
//        
//        int failedCounter = account.getFailedLoginAttempts();
//        if (failedCounter >= 5) {
//            facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid Credentials. You have tried 5 times", null));
//            //disable the account?
//        } 
//        else {
//            //let's update the counter
//            failedCounter ++;
//            account.setFailedLoginAttempts(failedCounter);
//            System.out.print(account);
//            System.out.print(failedCounter);
//            facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid Credentials. You have tried " + failedCounter + " /5 times", null));
//        }
//    }
   
        //logout code
    public void logout() throws Exception{
        FacesContext.getCurrentInstance().getExternalContext()
            .invalidateSession();
        ExternalContext ec = facesContext.getExternalContext();
        ((HttpServletRequest)ec.getRequest()).logout();       
        FacesContext.getCurrentInstance().getExternalContext()
            .redirect("/malware-report-web/login.xhtml");
    }
    
    
    private AuthenticationStatus processAuthentication(){
        ExternalContext ec = getExternalContext();
        Credential credential = new UsernamePasswordCredential(this.email, new Password(this.password));
        return securityContext.authenticate((HttpServletRequest)ec.getRequest(), (HttpServletResponse)ec.getResponse(), AuthenticationParameters.withParams().credential(credential));
    }
    
    /**
     * @return the email
     */
    public String getEmail() {
        return email;
    }

    /**
     * @param email the email to set
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * @return the password
     */
    public String getPassword() {
        return password;
    }

    /**
     * @param password the password to set
     */
    public void setPassword(String password) {
        this.password = password;
    }
    
 
    /**
     * @return the selectedAccount
     */
    public AccountDTO getSelectedAccount() {
        return selectedAccount;
    }

    /**
     * @param selectedAccount the selectedAccount to set
     */
    public void setSelectedAccount(AccountDTO selectedAccount) {
        this.selectedAccount = selectedAccount;
    }

}
