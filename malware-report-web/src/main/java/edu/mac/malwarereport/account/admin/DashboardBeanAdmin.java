/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.admin;

import edu.mac.malwarereport.account.applicationFacade.ReadAccountApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.organisation.applicationFacade.OrganisationAccountApplicationFacade;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import edu.mac.malwarereport.report.applicationFacade.SampleApplicationFacade;
import edu.mac.malwarereport.report.dto.SampleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.model.charts.ChartData;
import org.primefaces.model.charts.bar.BarChartDataSet;
import org.primefaces.model.charts.bar.BarChartModel;
import org.primefaces.model.charts.donut.DonutChartDataSet;
import org.primefaces.model.charts.donut.DonutChartModel;

/**
 *
 * @author tohyu
 */
@Named("dashboardbeanadmin")
@RequestScoped
public class DashboardBeanAdmin implements Serializable{

    private List<OrganisationDTO> organisation;
    
    private List<AccountDTO> account;
    
    private List<SampleDTO> sample;
    
    private int countOrganisation;
    
    private int countAccount;
    
    private int countReport;
    
    private BarChartModel barModel;
    
    private DonutChartModel donutModel;
    
    
    @Inject
    private OrganisationAccountApplicationFacade organisationAccountApplicationFacade;
    
    @Inject
    private ReadAccountApplicationFacade readAccountApplicationFacade;
    
    @Inject
    private SampleApplicationFacade sampleApplicationFacade;
    
    @PostConstruct
    public void init(){
        organisation = organisationAccountApplicationFacade.findAll();
        countOrganisation = organisation.size();
        
        account = readAccountApplicationFacade.findAll();
        countAccount = account.size();
        
        sample = sampleApplicationFacade.findAll();
        countReport = sample.size();        
        createBarModel();
        createDonutModel();
    }
    
    public void createBarModel() {
        setBarModel(new BarChartModel());
        ChartData data = new ChartData();

        BarChartDataSet barDataSet = new BarChartDataSet();
        barDataSet.setLabel("Number of Malware Scan In Each Month");

        //get the report
        List<Number> values = new ArrayList<>();
        values.add(0);
        values.add(0);
        values.add(0);
        values.add(0);
          for(SampleDTO eachSampleDTO : sample){
             //convert the date to String
             String date = eachSampleDTO.getTimestamp().toString();
            //get the month out from the date 
            switch(date.substring(4, 7)){ 
            case "Nov":
               values.set(0, (int)values.get(0)+1);
               break;
            case "Dec":
                 values.set(1, (int)values.get(1)+1);
                 break;
            case "Jan":
                values.set(2, (int)values.get(2)+1);
                break;
            case "Feb":
                values.set(3, (int)values.get(3)+1);
                break;
            }
        }        
        barDataSet.setData(values);

        List<String> bgColor = new ArrayList<>();
        bgColor.add("rgba(255, 159, 64, 0.2)");
        bgColor.add("rgba(255, 205, 86, 0.2)");
        bgColor.add("rgba(75, 192, 192, 0.2)");
        bgColor.add("rgba(153, 102, 255, 0.2)");
        barDataSet.setBackgroundColor(bgColor);

        List<String> borderColor = new ArrayList<>();
        
        borderColor.add("rgb(255, 159, 64)");
        borderColor.add("rgb(255, 205, 86)");
        borderColor.add("rgb(75, 192, 192)");
        borderColor.add("rgb(153, 102, 255)");
        barDataSet.setBorderColor(borderColor);
        barDataSet.setBorderWidth(1);

        data.addChartDataSet(barDataSet);

        //get the organisation
        List<String> labels = new ArrayList<>();
        labels.add("November");
        labels.add("December");
        labels.add("January");
        labels.add("February");
        data.setLabels(labels);
        getBarModel().setData(data);
    }
    
    public void createDonutModel() {
        donutModel = new DonutChartModel();
        ChartData data = new ChartData();

        DonutChartDataSet dataSet = new DonutChartDataSet();
        List<Number> values = new ArrayList<>();
        values.add(0);
        values.add(0);
        values.add(0);
        values.add(0);
        for(SampleDTO eachSampleDTO : sample){
            switch(eachSampleDTO.getReportValueDTO().getThreatScore()){
            case 5:
            case 4:
               values.set(0, (int)values.get(0)+1);
               break;
            case 3:
            case 2:
                values.set(1, (int)values.get(1)+1);
                break;
            case 1:
                values.set(2, (int)values.get(2)+1);
                break;
            case 0:
                values.set(3, (int)values.get(3)+1);
                break;
        }
        }
        dataSet.setData(values);

        List<String> bgColors = new ArrayList<>();
        bgColors.add("rgb(255, 99, 132)");
        bgColors.add("rgb(255, 205, 86)");
        bgColors.add("rgb(144,238,144)");
        bgColors.add("rgb(54, 162, 235)");
        dataSet.setBackgroundColor(bgColors);

        data.addChartDataSet(dataSet);
        List<String> labels = new ArrayList<>();
        labels.add("Malware");
        labels.add("Suspicious");
        labels.add("Safe");
         labels.add("Unknown");
        data.setLabels(labels);

        donutModel.setData(data);
    }
    
     /**
     * @return the organisation
     */
    public List<OrganisationDTO> getOrganisation() {
        return organisation;
    }

    /**
     * @param organisation the organisation to set
     */
    public void setOrganisation(List<OrganisationDTO> organisation) {
        this.organisation = organisation;
    }

    /**
     * @return the countOrganisation
     */
    public int getCountOrganisation() {
        return countOrganisation;
    }

    /**
     * @param countOrganisation the countOrganisation to set
     */
    public void setCountOrganisation(int countOrganisation) {
        this.countOrganisation = countOrganisation;
    }
    
      /**
     * @return the account
     */
    public List<AccountDTO> getAccount() {
        return account;
    }

    /**
     * @param account the account to set
     */
    public void setAccount(List<AccountDTO> account) {
        this.account = account;
    }
    
       /**
     * @return the countAccount
     */
    public int getCountAccount() {
        return countAccount;
    }

    /**
     * @param countAccount the countAccount to set
     */
    public void setCountAccount(int countAccount) {
        this.countAccount = countAccount;
    }   

    /**
     * @return the countReport
     */
    public int getCountReport() {
        return countReport;
    }

    /**
     * @param countReport the countReport to set
     */
    public void setCountReport(int countReport) {
        this.countReport = countReport;
    }
    
     /**
     * @return the barModel
     */
    public BarChartModel getBarModel() {
        return barModel;
    }

    /**
     * @param barModel the barModel to set
     */
    public void setBarModel(BarChartModel barModel) {
        this.barModel = barModel;
    }
    
        /**
     * @return the donutModel
     */
    public DonutChartModel getDonutModel() {
        return donutModel;
    }

    /**
     * @param donutModel the donutModel to set
     */
    public void setDonutModel(DonutChartModel donutModel) {
        this.donutModel = donutModel;
    }
    
        /**
     * @return the sample
     */
    public List<SampleDTO> getSample() {
        return sample;
    }

    /**
     * @param sample the sample to set
     */
    public void setSample(List<SampleDTO> sample) {
        this.sample = sample;
    }
    
}
