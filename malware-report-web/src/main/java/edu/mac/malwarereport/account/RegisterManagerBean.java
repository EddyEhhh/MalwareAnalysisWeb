/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account;

import edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.FAILURE;
import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.SUCCESS;
import static edu.mac.malwarereport.account.outputInfo.RegisterStatus.EMAIL_EXIST;
import edu.mac.malwarereport.organisation.applicationFacade.OrganisationAccountApplicationFacade;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.PrimeFaces;

/**
 *
 * @author Jaibun Thana
 */
@Named
@RequestScoped
public class RegisterManagerBean {
  
    @Inject
    private FacesContext facesContext;
    
    @Inject
    private OrganisationAccountApplicationFacade organisationAccountApplicationFacade;
    
    @Inject
    private AccountOrganisationApplicationFacade accountOrganisationApplicationFacade;
    
    private PrimeFaces primeFaces = PrimeFaces.current();

    private AccountDTO account = new AccountDTO();
    
    private List<OrganisationDTO> availableOrganisation = new ArrayList<>();
    
    private OrganisationDTO selectedOrganisation = new OrganisationDTO();
        
    
    @PostConstruct
    public void showAvailableOrganisation(){
        availableOrganisation =(organisationAccountApplicationFacade.findAll());
        System.out.print("Test");
    }
    
    public void registerManager() throws Exception{
        System.out.print("REGI");
        System.out.print(getSelectedOrganisation().getName() + "----------------------------------");
        switch (accountOrganisationApplicationFacade.registerManager(account, selectedOrganisation)){
            case EMAIL_EXIST:
                System.out.print("A2");
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "User already exist", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
            case FAILURE:
                System.out.print("A2");
                    facesContext.addMessage("createMemberMessage", new FacesMessage(FacesMessage.SEVERITY_ERROR, "An error has occured while creating user", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
            case SUCCESS:
                System.out.print("A3");
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "User registered", null));
                    account = new AccountDTO();
                    primeFaces.ajax().update("memberForm");
                    primeFaces.executeScript("PF('addMemberDialog').hide();");
                    primeFaces.ajax().update("createMemberPanel");
                    break;
            default:
                System.out.print("A4");
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
        }
    }

    /**
     * @return the accountDTO
     */
    public AccountDTO getAccount() {
        return account;
    }

    /**
     * @param accountDTO the accountDTO to set
     */
    public void setAccount(AccountDTO account) {
        this.account = account;
    }

    /**
     * @return the availableOrganisation
     */
    public List<OrganisationDTO> getAvailableOrganisation() {
        return availableOrganisation;
    }

    /**
     * @param availableOrganisation the availableOrganisation to set
     */
    public void setAvailableOrganisation(List<OrganisationDTO> availableOrganisation) {
        this.availableOrganisation = availableOrganisation;
    }

    /**
     * @return the selectedOrganisation
     */
    public OrganisationDTO getSelectedOrganisation() {
        return selectedOrganisation;
    }

    /**
     * @param selectedOrganisation the selectedOrganisation to set
     */
    public void setSelectedOrganisation(OrganisationDTO selectedOrganisation) {
        this.selectedOrganisation = selectedOrganisation;
    }
    
  



}
