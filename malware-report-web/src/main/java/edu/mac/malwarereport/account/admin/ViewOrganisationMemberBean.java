/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.admin;

import edu.mac.malwarereport.account.applicationFacade.AccountApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.SubjectRoleApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.ERROR;
import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.SUCCESS;
import edu.mac.malwarereport.organisation.applicationFacade.OrganisationApplicationFacade;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletRequest;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import org.primefaces.PrimeFaces;

/**
 *
 * @author tohyu
 */
@Named("viewOrganiastionMemberBean")
@ViewScoped
//view all the members part of the organisation
public class ViewOrganisationMemberBean implements Serializable{

    private List<AccountDTO> accounts;
    
    private List<AccountDTO> filteredAccounts;
    
    private List<RoleDTO> currentRole;
    
    private Map<String, List<RoleDTO>> accountRole = new HashMap<String,List<RoleDTO>>();
    
    @Inject
    private AccountOrganisationApplicationFacade accountOrganisationApplicationFacade;
    
    @Inject
    private OrganisationApplicationFacade organisationApplicationFacade;
    
    @Inject
    private SubjectRoleApplicationFacade subjectRoleApplicationFacade;
    
    private String id;
    
    private OrganisationDTO selectedOrganisation;
    
    private AccountDTO selectedAccountDTO;

    
    @PostConstruct
    public void init(){
        try{
        HttpServletRequest req = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
        //this is to request the 'id' which is the variable at the end on the url 
        id = (req.getParameter("id"));
        OrganisationDTO organisationDTO = new OrganisationDTO();
        organisationDTO.setSuuid(id);
        getManagerAccounts(organisationDTO);
        selectedOrganisation = organisationApplicationFacade.findBySuuid(id);
        Collections.reverse(accounts);
        for(AccountDTO account : accounts){
            accountRole.put(account.getSuuid(), subjectRoleApplicationFacade.getAllRoleByAccount(account));
        }}
        catch (Exception e){}
    }
    
    public void getManagerAccounts(OrganisationDTO organisationDTO){
        accounts = accountOrganisationApplicationFacade.getAllManagerByOrganisation(organisationDTO);
    }

    
    public boolean globalFilterFunction(Object value, Object filter, Locale locale) {
        String filterText = (filter == null) ? null : filter.toString().trim().toLowerCase();
        if (StringUtils.isBlank(filterText)) {
            return true;
        }

        AccountDTO account = (AccountDTO) value;
        return account.getFirstName().toLowerCase().contains(filterText)
                || account.getLastName().toLowerCase().contains(filterText)
                || account.getEmail().toLowerCase().contains(filterText);
    }
    
     public void openDeleteDialog(AccountDTO accountDTO){
        selectedAccountDTO = (accountDTO);
        primeFaces.executeScript("PF('deleteMemberDialog').show();");
        //FacesContext.getCurrentInstance().getPartialViewContext().getRenderIds().add("deleteRoleForm:deleteRoleDialog");
    }
    
     @Inject
     private AccountApplicationFacade accountApplicationFacade;
     
    public void delete() throws Exception{
        System.out.print("WEB DELETE");
        switch(accountApplicationFacade.delete(selectedAccountDTO)){
            case SUCCESS:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Member sucessfully removed", null));
                primeFaces.ajax().update("memberForm");
                break;
            case ERROR:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error: Oops something went wrong!", null));
                break;
            default:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                break;
        }
    }
    
     /**
     * @return the accounts
     */
    public List<AccountDTO> getAccounts() {
        return accounts;
    }

    /**
     * @param accounts the accounts to set
     */
    public void setAccounts(List<AccountDTO> accounts) {
        this.accounts = accounts;
    }
    
    
    /**
     * @return the filteredAccounts
     */
    public List<AccountDTO> getFilteredAccounts() {
        return filteredAccounts;
    }

    /**
     * @param filteredAccounts the filteredAccounts to set
     */
    public void setFilteredAccounts(List<AccountDTO> filteredAccounts) {
        this.filteredAccounts = filteredAccounts;
    }

    /**
     * @return the currentRole
     */
    public List<RoleDTO> getCurrentRole() {
        return currentRole;
    }

    /**
     * @param currentRole the currentRole to set
     */
    public void setCurrentRole(List<RoleDTO> currentRole) {
        this.currentRole = currentRole;
    }

    /**
     * @return the accountRole
     */
    public Map<String, List<RoleDTO>> getAccountRole() {
        return accountRole;
    }

    /**
     * @param accountRole the accountRole to set
     */
    public void setAccountRole(Map<String, List<RoleDTO>> accountRole) {
        this.accountRole = accountRole;
    }
    
    @Inject
    private FacesContext facesContext;
    
    private PrimeFaces primeFaces = PrimeFaces.current();

    private AccountDTO accountDTO = new AccountDTO();
    
    
    public void registerToOrganisation() throws Exception{
        System.out.print("REGISTERTOORG");
        //this is to request the 'id' which is the variable at the end on the url 
        OrganisationDTO organisationDTO = new OrganisationDTO();
        organisationDTO.setSuuid(id);
        System.out.print(id+"-------------------------------------------");
        switch (accountOrganisationApplicationFacade.registerManager(accountDTO, organisationDTO)){
            case EMAIL_EXIST:
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "User already exist", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
            case FAILURE:
                    facesContext.addMessage("createMemberMessage", new FacesMessage(FacesMessage.SEVERITY_ERROR, "An error has occured while creating user", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
            case SUCCESS:
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "User registered", null));
                    accountDTO = new AccountDTO();
                    primeFaces.ajax().update("memberForm");
                    primeFaces.executeScript("PF('addMemberDialog').hide();");
                    primeFaces.ajax().update("createMemberForm");
                    break;
            default:
                    facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                    primeFaces.ajax().update("createMemberPanel");
                    break;
        }
    }

    //getters and setters
    public AccountDTO getAccountDTO() {
        return accountDTO;
    }

    public void setAccountDTO(AccountDTO accountDTO) {
        this.accountDTO = accountDTO;
    }

    /**
     * @return the selectedOrganisation
     */
    public OrganisationDTO getSelectedOrganisation() {
        return selectedOrganisation;
    }

    /**
     * @param selectedOrganisation the selectedOrganisation to set
     */
    public void setSelectedOrganisation(OrganisationDTO selectedOrganisation) {
        this.selectedOrganisation = selectedOrganisation;
    }

    /**
     * @return the selectedAccountDTO
     */
    public AccountDTO getSelectedAccountDTO() {
        return selectedAccountDTO;
    }

    /**
     * @param selectedAccountDTO the selectedAccountDTO to set
     */
    public void setSelectedAccountDTO(AccountDTO selectedAccountDTO) {
        this.selectedAccountDTO = selectedAccountDTO;
    }
    
    
}
