/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account;

import edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade;
import edu.mac.malwarereport.account.applicationFacade.SubjectRoleApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author tohyu
 */
@Named("viewAllMemberBean")
@RequestScoped
//view all the members part of the organisation
public class ViewAllMemberBean implements Serializable{

    private List<AccountDTO> accounts;
    
    private List<AccountDTO> filteredAccounts;
    
    private List<RoleDTO> currentRole;
    
    private Map<String, List<RoleDTO>> accountRole = new HashMap<String,List<RoleDTO>>();
    
    @Inject
    private AccountOrganisationApplicationFacade accountOrganisationApplicationFacade;
    
    @Inject
    private SubjectRoleApplicationFacade subjectRoleApplicationFacade;
    
    @PostConstruct
    public void init(){
        accounts = accountOrganisationApplicationFacade.getAccountList();
        Collections.reverse(accounts);
        for(AccountDTO account : accounts){
            accountRole.put(account.getSuuid(), subjectRoleApplicationFacade.getAllRoleByAccount(account));
        }
    }

    
    public boolean globalFilterFunction(Object value, Object filter, Locale locale) {
        String filterText = (filter == null) ? null : filter.toString().trim().toLowerCase();
        if (StringUtils.isBlank(filterText)) {
            return true;
        }

        AccountDTO account = (AccountDTO) value;
        return account.getFirstName().toLowerCase().contains(filterText)
                || account.getLastName().toLowerCase().contains(filterText)
                || account.getEmail().toLowerCase().contains(filterText);
        
    }
    
     /**
     * @return the accounts
     */
    public List<AccountDTO> getAccounts() {
        return accounts;
    }

    /**
     * @param accounts the accounts to set
     */
    public void setAccounts(List<AccountDTO> accounts) {
        this.accounts = accounts;
    }
    
    
    /**
     * @return the filteredAccounts
     */
    public List<AccountDTO> getFilteredAccounts() {
        return filteredAccounts;
    }

    /**
     * @param filteredAccounts the filteredAccounts to set
     */
    public void setFilteredAccounts(List<AccountDTO> filteredAccounts) {
        this.filteredAccounts = filteredAccounts;
    }

    /**
     * @return the currentRole
     */
    public List<RoleDTO> getCurrentRole() {
        return currentRole;
    }

    /**
     * @param currentRole the currentRole to set
     */
    public void setCurrentRole(List<RoleDTO> currentRole) {
        this.currentRole = currentRole;
    }

    /**
     * @return the accountRole
     */
    public Map<String, List<RoleDTO>> getAccountRole() {
        return accountRole;
    }

    /**
     * @param accountRole the accountRole to set
     */
    public void setAccountRole(Map<String, List<RoleDTO>> accountRole) {
        this.accountRole = accountRole;
    }
    
    
}
