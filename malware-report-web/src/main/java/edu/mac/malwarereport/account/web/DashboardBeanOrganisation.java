/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.web;

import edu.mac.malwarereport.accesscontrol.service.permission.RolePermission;
import edu.mac.malwarereport.report.applicationFacade.ReportOrganisationApplicationFacade;
import edu.mac.malwarereport.report.dto.SampleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.primefaces.model.charts.donut.DonutChartModel;
import org.primefaces.model.charts.ChartData;
import org.primefaces.model.charts.bar.BarChartDataSet;
import org.primefaces.model.charts.bar.BarChartModel;
import org.primefaces.model.charts.donut.DonutChartDataSet;

/**
 *
 * @author tohyu
 */
@Named("dashboardbean")
@ViewScoped
public class DashboardBeanOrganisation implements Serializable {
   
    private List<SampleDTO> samples;
    
    private List<SampleDTO> pending;

    private int count;

    private Object value;

    private DonutChartModel donutModel;

    private BarChartModel barModel;
    
    
    @Inject
    private RedirectBean redirectBean;

    @Inject
    private ReportOrganisationApplicationFacade reportOrganisationApplicationFacade;

    
    @Inject
    private RolePermission rolePermission;
    public void test(){
        rolePermission.getAccountPermission();
    }
    
    @PostConstruct
    public void init() {
        samples = reportOrganisationApplicationFacade.getSampleList();
        count = samples.size();
//        for(SampleDTO eachSample : samples){
//            if(eachSample.getStatus().equals("In-Queue")){
//                pending.add(eachSample);
//            }
//        }
        //pendingScan();
        createDonutModel();
        createBarModel();
    }

//    public void animateNumberOfSample() throws InterruptedException{
//        //for(int x = 0; x<=samples.size();x++){
//            count++;
//            updateNumberOfSample();
//            TimeUnit.SECONDS.sleep(1);
//        //}
//    }
//    
//    private void updateNumberOfSample() throws InterruptedException{
//        PrimeFaces.current().ajax().update("numberOfReportOutput");
//    }
    
    public void pendingScan(){
        for (SampleDTO eachSampleDTO : samples) {
            System.out.print("A2");
            if(eachSampleDTO.getStatus().equals("In-Queue")){
                pending.add(eachSampleDTO);
            }
        }
    }
    
    public void createBarModel() {
        setBarModel(new BarChartModel());
        ChartData data = new ChartData();

        BarChartDataSet barDataSet = new BarChartDataSet();
        barDataSet.setLabel("Number of Malware Scan In Each Month");

        //get the report
        List<Number> values = new ArrayList<>();
        values.add(0);
        values.add(0);
        values.add(0);
        values.add(0);
        
        for (SampleDTO eachSampleDTO : samples) {
            //convert the date to String
            String date = eachSampleDTO.getTimestamp().toString();
            //get the month out from the date 
            switch (date.substring(4, 7)) {
                case "Nov":
                    values.set(0, (int) values.get(0) + 1);
                    break;
                case "Dec":
                    values.set(1, (int) values.get(1) + 1);
                    break;
                case "Jan":
                    values.set(2, (int) values.get(2) + 1);
                    break;
                case "Feb":
                    values.set(3, (int) values.get(3) + 1);
                    break;
            }
        }
        barDataSet.setData(values);

        List<String> bgColor = new ArrayList<>();
        bgColor.add("rgba(255, 159, 64, 0.2)");
        bgColor.add("rgba(255, 205, 86, 0.2)");
        bgColor.add("rgba(75, 192, 192, 0.2)");
        bgColor.add("rgba(153, 102, 255, 0.2)");
        barDataSet.setBackgroundColor(bgColor);

        List<String> borderColor = new ArrayList<>();

        borderColor.add("rgb(255, 159, 64)");
        borderColor.add("rgb(255, 205, 86)");
        borderColor.add("rgb(75, 192, 192)");
        borderColor.add("rgb(153, 102, 255)");
        barDataSet.setBorderColor(borderColor);
        barDataSet.setBorderWidth(1);

        data.addChartDataSet(barDataSet);

        //get the organisation
        List<String> labels = new ArrayList<>();
        labels.add("November");
        labels.add("December");
        labels.add("January");
        labels.add("February");
        data.setLabels(labels);
        getBarModel().setData(data);
    }

    public void createDonutModel() {
        donutModel = new DonutChartModel();
        ChartData data = new ChartData();

        DonutChartDataSet dataSet = new DonutChartDataSet();
        List<Number> values = new ArrayList<>();
        values.add(0);
        values.add(0);
        values.add(0);
        values.add(0);
        for (SampleDTO eachSampleDTO : samples) {
            switch (eachSampleDTO.getReportValueDTO().getThreatScore()) {
                case 5:
                case 4:
                    values.set(0, (int) values.get(0) + 1);
                    break;
                case 3:
                case 2:
                    values.set(1, (int) values.get(1) + 1);
                    break;
                case 1:
                    values.set(2, (int) values.get(2) + 1);
                    break;
                case 0:
                    values.set(3, (int) values.get(3) + 1);
                    break;
            }
        }
        dataSet.setData(values);

        List<String> bgColors = new ArrayList<>();
        bgColors.add("rgb(255, 99, 132)");
        bgColors.add("rgb(255, 205, 86)");
        bgColors.add("rgb(144,238,144)");
        bgColors.add("rgb(54, 162, 235)");
        dataSet.setBackgroundColor(bgColors);

        data.addChartDataSet(dataSet);
        List<String> labels = new ArrayList<>();
        labels.add("Malware");
        labels.add("Suspicious");
        labels.add("Safe");
        labels.add("Unknown");
        data.setLabels(labels);

        donutModel.setData(data);
    }

    /**
     * @return the samples
     */
    public List<SampleDTO> getSamples() {
        return samples;
    }

    /**
     * @param samples the samples to set
     */
    public void setSamples(List<SampleDTO> samples) {
        this.samples = samples;
    }

    /**
     * @return the count
     */
    public int getCount() {
        return count;
    }

    /**
     * @return the value
     */
    public Object getValue() {
        return value;
    }

    /**
     * @param value the value to set
     */
    public void setValue(Object value) {
        this.value = value;
    }

    /**
     * @param count the count to set
     */
    public void setCount(int count) {
        this.count = count;
    }

    /**
     * @return the donutModel
     */
    public DonutChartModel getDonutModel() {
        return donutModel;
    }

    /**
     * @param donutModel the donutModel to set
     */
    public void setDonutModel(DonutChartModel donutModel) {
        this.donutModel = donutModel;
    }

    /**
     * @return the barModel
     */
    public BarChartModel getBarModel() {
        return barModel;
    }

    /**
     * @param barModel the barModel to set
     */
    public void setBarModel(BarChartModel barModel) {
        this.barModel = barModel;
    }
    
     /**
     * @return the pending
     */
    public List<SampleDTO> getPending() {
        return pending;
    }

    /**
     * @param pending the pending to set
     */
    public void setPending(List<SampleDTO> pending) {
        this.pending = pending;
    }


}
