/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.report;

import edu.mac.malwarereport.report.applicationFacade.ReportOrganisationApplicationFacade;
import edu.mac.malwarereport.report.dto.SampleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author tohyu
 */
@Named("viewOrganisationReportBean")
@RequestScoped
//this class is for viewing all the reports 
public class ViewOrganisationReportbean implements Serializable {

    private List<SampleDTO> samples;

    //private List<ReportValueDTO> filterReports
    private List<SampleDTO> filteredReports;
    
    private SampleDTO sampleDTO;

    @Inject
    private ReportOrganisationApplicationFacade reportOrganisationApplicationFacade;

    private int count;


    //initialise 
    @PostConstruct
    public void init() {
        samples = reportOrganisationApplicationFacade.getSampleList();
        Collections.reverse(samples);
//        count = samples.size();
    }
    
    public List<String> getStatus(String status){
        List<String> output = new ArrayList<>();
        switch(status.toLowerCase()){
            case "done":
                output.add("success");
                output.add("Done");
                return output;
            case "processing":
                output.add("warning");
                output.add("Processing");
                return output;
            case "in-queue":
                output.add("warning");
                output.add("In-Queue");
                return output;
            default:
                output.add("danger");
                output.add("Error");
                return output;
        }
    }

    public boolean globalFilterFunction(Object value, Object filter, Locale locale) {
        String filterText = (filter == null) ? null : filter.toString().trim().toLowerCase();
        if (StringUtils.isBlank(filterText)) {
            return true;
        }
        int filterInt = getInteger(filterText);

        SampleDTO sample = (SampleDTO) value;
        return sample.getReportValueDTO().getSampleName().toLowerCase().contains(filterText)
                || sample.getReportValueDTO().getHashSHA256().toLowerCase().contains(filterText)
                || sample.getReportValueDTO().getThreatScore() == filterInt
                || sample.getReportValueDTO().getHashMD5().toLowerCase().contains(filterText)
                || sample.getReportValueDTO().getHashSHA1().toLowerCase().contains(filterText);

    }

    private int getInteger(String filterText) {
        try {
            return Integer.parseInt(filterText);
        } catch (NumberFormatException ex) {
            return 0;
        }
    }

    /**
     * @return the reports
     */
    public List<SampleDTO> getSamples() {
        return samples;
    }

    /**
     * @param reports the reports to set
     */
    public void setSamples(List<SampleDTO> samples) {
        this.samples = samples;
    }
    
     /**
     * @return the filteredReports
     */
    public List<SampleDTO> getFilteredReports() {
        return filteredReports;
    }

    /**
     * @param filteredReports the filteredReports to set
     */
    public void setFilteredReports(List<SampleDTO> filteredReports) {
        this.filteredReports = filteredReports;
    }
    
        /**
     * @return the count
     */
    public int getCount() {
        return count;
    }

    /**
     * @param count the count to set
     */
    public void setCount(int count) {
        this.count = count;
    }
    
        /**
     * @return the sampleDTO
     */
    public SampleDTO getSampleDTO() {
        return sampleDTO;
    }

    /**
     * @param sampleDTO the sampleDTO to set
     */
    public void setSampleDTO(SampleDTO sampleDTO) {
        this.sampleDTO = sampleDTO;
    }


}
