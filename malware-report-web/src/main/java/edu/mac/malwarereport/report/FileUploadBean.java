/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.report;

import edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade;
import edu.mac.malwarereport.report.applicationFacade.UploadFileApplicationFacade;
import edu.mac.malwarereport.report.dto.ReportDTO;
import edu.mac.malwarereport.report.dto.SampleDTO;
import static edu.mac.malwarereport.report.outputInfo.UploadFileStatus.UPLOAD_ERROR;
import edu.mac.malwarereport.report.ownershipassignment.manager.ReportOrganisationManager;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.IOException;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.model.file.UploadedFile;

/**
 *
 * @author tohyu
 */
@Named("fileUploadBean")
@RequestScoped
public class FileUploadBean implements Serializable{
    
    private UploadedFile file;
    private SampleDTO sampleDTO = new SampleDTO();
    private boolean notification;
    
    @Inject
    private UploadFileApplicationFacade uploadFileApplicationFacade;

    public void upload() throws IOException {
        String fileName = file.getFileName();
        ReportDTO reportDTO = sampleDTO.getReportDTO();
        reportDTO.setFilePath(fileName);
        sampleDTO.setReportDTO(reportDTO);
        byte[] bytes = file.getContent();
        System.out.print(sampleDTO.getReportDTO().getFilePath());
        switch (uploadFileApplicationFacade.isUploadFile(sampleDTO, bytes)){
            case SUCCESS:
                System.out.print("File succssfully uploaded");
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Successful", fileName + " is uploaded"));
                break;
            case UPLOAD_ERROR:
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, "Error uploading file", fileName + " is not uploaded."));
                break;
            case FAILURE:
            default:
                System.out.print("File is not successfully uploaded");
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, "Not Successful", "Please try again"));
                break;
        }
    }
    
    @PostConstruct
    public void init(){
        disableUploadFile();
    }
    private String disabledUploadFile;
    
    private int countTotalReport;
    
    private int numberOfScan;
    
    private List<SampleDTO> samples;
    
    @Inject 
    private AccountOrganisationApplicationFacade accountOrganisationApplicationFacade;
    
    @Inject 
    private ReportOrganisationManager reportOrganisationManager;
    public void disableUploadFile() {
        samples = reportOrganisationManager.getSampleList();
        LocalDate currentdate = LocalDate.now();
        String month = currentdate.getMonth().toString().toLowerCase();
        String year = String.valueOf(currentdate.getYear());
        String mth = month.substring(0, 3);

        List<Integer> values = new ArrayList<>();
        values.add(0);

        for (SampleDTO eachSampleDTO : getSamples()) {
            //convert the date to String
            String date = eachSampleDTO.getTimestamp().toString();
            String sampleMonth = date.substring(4, 7).toLowerCase();

            if (sampleMonth.matches(mth)) //get the month out from the date 
            {
                values.set(0, (int) values.get(0) + 1);
            }
            else{
                System.out.print("error");
            }
        }
        System.out.print(values.get(0));
        numberOfScan = (accountOrganisationApplicationFacade.getMaxUpload() - values.get(0));
        if (values.get(0) >= accountOrganisationApplicationFacade.getMaxUpload()){           
            setDisabledUploadFile("true");
        }
        else{
            setDisabledUploadFile("false");
        }
    }   
    
    /**
     * @return the file
     */
    public UploadedFile getFile() {
        return file;
    }

    /**
     * @param file the file to set
     */
    public void setFile(UploadedFile file) {
        this.file = file;
    }

    /**
     * @return the notification
     */
    public boolean isNotification() {
        return notification;
    }

    /**
     * @param notification the notification to set
     */
    public void setNotification(boolean notification) {
        this.notification = notification;
    }

    /**
     * @return the sampleDTO
     */
    public SampleDTO getSampleDTO() {
        return sampleDTO;
    }

    /**
     * @param sampleDTO the sampleDTO to set
     */
    public void setSampleDTO(SampleDTO sampleDTO) {
        this.sampleDTO = sampleDTO;
    }

    /**
     * @return the disabledUploadFile
     */
    public String getDisabledUploadFile() {
        return disabledUploadFile;
    }

    /**
     * @param disabledUploadFile the disabledUploadFile to set
     */
    public void setDisabledUploadFile(String disabledUploadFile) {
        this.disabledUploadFile = disabledUploadFile;
    }

    /**
     * @return the countTotalReport
     */
    public int getCountTotalReport() {
        return countTotalReport;
    }

    /**
     * @param countTotalReport the countTotalReport to set
     */
    public void setCountTotalReport(int countTotalReport) {
        this.countTotalReport = countTotalReport;
    }

    /**
     * @return the numberOfScan
     */
    public int getNumberOfScan() {
        return numberOfScan;
    }

    /**
     * @param numberOfScan the numberOfScan to set
     */
    public void setNumberOfScan(int numberOfScan) {
        this.numberOfScan = numberOfScan;
    }

    /**
     * @return the samples
     */
    public List<SampleDTO> getSamples() {
        return samples;
    }

    /**
     * @param samples the samples to set
     */
    public void setSamples(List<SampleDTO> samples) {
        this.samples = samples;
    }

       
}
