/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role;

import edu.mac.malwarereport.account.web.RedirectBean;
import edu.mac.malwarereport.permission.applicationFacade.PermissionApplicationFacade;
import edu.mac.malwarereport.permission.dto.PermissionDTO;
import edu.mac.malwarereport.role.applicationFacade.RoleApplicationFacade;
import edu.mac.malwarereport.role.applicationFacade.RoleOrganisationApplicationFacade;
import edu.mac.malwarereport.role.applicationFacade.RolePermissionApplicationFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import static edu.mac.malwarereport.role.outputInfo.RoleMappingStatus.INVALID_INHERITANCE;
import jakarta.annotation.PostConstruct;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.context.Flash;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletRequest;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Named("editRoleBean")
@ViewScoped
public class EditRoleBean implements Serializable{    
    
    @Inject
    private RoleApplicationFacade roleApplicationFacade;
    
    @Inject
    private RedirectBean redirectBean;
    
    @Inject
    private RolePermissionApplicationFacade rolePermissionApplicationFacade;
    
    @Inject
    private PermissionApplicationFacade permissionApplicationFacade;

    private List<RoleDTO> availableRoles = new ArrayList<RoleDTO>();
    
    private List<RoleDTO> inherit = new ArrayList<RoleDTO>();

    private List<RoleDTO> indirectInheritedRole = new ArrayList<>();
    
    private List<RoleDTO> inheritedBy = new ArrayList<>();
    
    private List<PermissionDTO> availablePermission = new ArrayList<>();
    
    private List<PermissionDTO> inheritedPermission = new ArrayList<>();
    
    private List<PermissionDTO> selectedPermission = new ArrayList<>();
    
    private List<PermissionDTO> inheritedByPermission = new ArrayList<>();
    
    private RoleDTO selectedRole = new RoleDTO();
    
    @Inject
    private FacesContext facesContext;
    
    @Inject
    private RoleOrganisationApplicationFacade roleOrganisationApplicationFacade;
    
     private HttpServletRequest req = (HttpServletRequest)facesContext.getCurrentInstance().getExternalContext().getRequest();
     
    @PostConstruct
    public void init() {
        try{
                String uid = req.getParameter("id");
                RoleDTO inputRoleDTO = new RoleDTO();
                inputRoleDTO.setSuuid(uid);
                selectedRole = roleApplicationFacade.findBySuuid(inputRoleDTO);
        }
        catch (Exception e){
        }
        availableRoles = roleOrganisationApplicationFacade.getRoleList();
        
        //remove CurrentRole from available choices
//        inherit = selectedRole.getChildren();
        for(RoleDTO allRole : availableRoles){
                //Set current inputs to the current roles
                //remove current role
                for(RoleDTO allCurrent : selectedRole.getChildren()){
                    if(allRole.getSuuid().equals(allCurrent.getSuuid())){
                        inherit.add(allRole);
                    }
                }
            }
        for(RoleDTO allRole : availableRoles){
                if(selectedRole.getSuuid().equals(allRole.getSuuid())){
                    availableRoles.remove(allRole);
                    break;
                }
        }
        showPermission();
        onSelectRole();
        for(PermissionDTO tempPermissionDTO : rolePermissionApplicationFacade.getAllPermissionByRole(selectedRole)){
            for(PermissionDTO eachAvailablePermission : availablePermission){
                if(eachAvailablePermission.getSuuid().equals(tempPermissionDTO.getSuuid())){
                    selectedPermission.add(eachAvailablePermission);
                }
            }
        }
    }
    
    public void updateRole() throws Exception{
        selectedRole.setChildren(inherit);
        for(PermissionDTO eachPermissionDTO :selectedPermission){
            System.out.print(eachPermissionDTO.getName());
        }
        switch (roleApplicationFacade.update(selectedRole, selectedPermission)){
            case SUCCESS:
                facesContext = FacesContext.getCurrentInstance();
                Flash flash = facesContext.getExternalContext().getFlash();
                flash.setKeepMessages(true);
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successfully", null));
                redirectBean.viewRoleArgs(selectedRole.getSuuid());
                break;
            case ERROR:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "ERROR something went wrong!", null));
                break;
            case INVALID_INPUT_SELF:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Cannot inherit itself", null));
                break;
            case INVALID_INHERITANCE:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid inheritance", null));
                break;
            default:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                break;
        }
        
    }
    
    public void onSelectRole() {
        //Update and get all child to filter
        inheritedPermission = new ArrayList<>();
        indirectInheritedRole = new ArrayList<>();
        for (RoleDTO eachCurrentRole : inherit) {
            List<RoleDTO> indirectInheritedRoleCheck = eachCurrentRole.getInheritance(eachCurrentRole);
            for (RoleDTO eachInheritRole : indirectInheritedRoleCheck) {
                if (!containsName(indirectInheritedRole, eachInheritRole.getSuuid())) {
                    getIndirectInheritedRole().add(eachInheritRole);
//                    for(RoleDTO eachAvailableRole:availableRoles){
//                        if(eachAvailableRole.getSuuid()==eachInheritRole.getSuuid()){
//                            availableRoles.remove(eachAvailableRole);
//                            break;
//                        }
//                    }
                }

            }
            
            //get all permission
            for (RoleDTO eachRoleInheritedList : eachCurrentRole.getInheritance(eachCurrentRole)) {
                for (PermissionDTO eachPermissionDTO : rolePermissionApplicationFacade.getAllPermissionByRole(eachRoleInheritedList)) {
                    if(!containsPermissionSuuid(inheritedPermission, eachPermissionDTO.getSuuid()));
//                    System.out.print("PERMISSION: " + eachPermissionDTO.getSuuid());
                    getInheritedPermission().add(eachPermissionDTO);
                }
            }
                for (PermissionDTO eachPermissionDTO : rolePermissionApplicationFacade.getAllPermissionByRole(eachCurrentRole)) {
                    if(!containsPermissionSuuid(inheritedPermission, eachPermissionDTO.getSuuid()));
//                    System.out.print("PERMISSION: " + eachPermissionDTO.getSuuid());
                    getInheritedPermission().add(eachPermissionDTO);
                }
                //add to selected all inherited permission
                //FORCE SELECT (DO NOT REMOVE)
//                for (PermissionDTO eachInheritedPermission : getInheritedPermission()) {
//                 for (PermissionDTO eachAvailablePermission : getAvailablePermission()) {
//                     if (eachInheritedPermission.getSuuid().equals(eachAvailablePermission.getSuuid())) {
//                         getSelectedPermission().add(eachAvailablePermission);
//                     }
//                 }
//         }
        }
        
        //show all parent
        inheritedBy = new ArrayList();
            List<RoleDTO> inheritedByCheck = selectedRole.getAllInheritedBy(selectedRole);
            for (RoleDTO eachInheritByRole : inheritedByCheck) {
                //remove duplicate
                if (!containsName(inheritedBy, eachInheritByRole.getSuuid())) {
                    inheritedBy.add(eachInheritByRole);
                }
        }
//            for(RoleDTO allRole : availableRoles){
//                //remove all parent
//                if(containsName(inheritedBy, allRole.getSuuid())){
//                    availableRoles.remove(allRole);
//                }
//            }

    }
    
    public boolean containsName(final List<RoleDTO> list, final String suuid) {
        return list.stream().map(RoleDTO::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }
    
    public boolean containsPermissionSuuid(List<PermissionDTO> list, String suuid) {
        return list.stream().map(PermissionDTO::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }

    public void showPermission(){
        availablePermission = permissionApplicationFacade.findAllUserAvailablePermission();      
    }
    
    /**
     * @return the selectedRole
     */
    public RoleDTO getSelectedRole() {
        return selectedRole;
    }

    /**
     * @param selectedRole the selectedRole to set
     */
    public void setSelectedRole(RoleDTO selectedRole) {
        this.selectedRole = selectedRole;
    }

    /**
     * @return the availableRoles
     */
    public List<RoleDTO> getAvailableRoles() {
        return availableRoles;
    }

    /**
     * @param availableRoles the availableRoles to set
     */
    public void setAvailableRoles(List<RoleDTO> availableRoles) {
        this.availableRoles = availableRoles;
    }

    /**
     * @return the inherit
     */
    public List<RoleDTO> getInherit() {
        return inherit;
    }

    /**
     * @param inherit the inherit to set
     */
    public void setInherit(List<RoleDTO> inherit) {
        this.inherit = inherit;
    }

    /**
     * @return the indirectInheritedRole
     */
    public List<RoleDTO> getIndirectInheritedRole() {
        return indirectInheritedRole;
    }

    /**
     * @param indirectInheritedRole the indirectInheritedRole to set
     */
    public void setIndirectInheritedRole(List<RoleDTO> indirectInheritedRole) {
        this.indirectInheritedRole = indirectInheritedRole;
    }

    /**
     * @return the inheritedBy
     */
    public List<RoleDTO> getInheritedBy() {
        return inheritedBy;
    }

    /**
     * @param inheritedBy the inheritedBy to set
     */
    public void setInheritedBy(List<RoleDTO> inheritedBy) {
        this.inheritedBy = inheritedBy;
    }

    /**
     * @return the availablePermission
     */
    public List<PermissionDTO> getAvailablePermission() {
        return availablePermission;
    }

    /**
     * @param availablePermission the availablePermission to set
     */
    public void setAvailablePermission(List<PermissionDTO> availablePermission) {
        this.availablePermission = availablePermission;
    }

    /**
     * @return the inheritedPermission
     */
    public List<PermissionDTO> getInheritedPermission() {
        return inheritedPermission;
    }

    /**
     * @param inheritedPermission the inheritedPermission to set
     */
    public void setInheritedPermission(List<PermissionDTO> inheritedPermission) {
        this.inheritedPermission = inheritedPermission;
    }

    /**
     * @return the selectedPermission
     */
    public List<PermissionDTO> getSelectedPermission() {
        return selectedPermission;
    }

    /**
     * @param selectedPermission the selectedPermission to set
     */
    public void setSelectedPermission(List<PermissionDTO> selectedPermission) {
        this.selectedPermission = selectedPermission;
    }

    /**
     * @return the inheritedByPermission
     */
    public List<PermissionDTO> getInheritedByPermission() {
        return inheritedByPermission;
    }

    /**
     * @param inheritedByPermission the inheritedByPermission to set
     */
    public void setInheritedByPermission(List<PermissionDTO> inheritedByPermission) {
        this.inheritedByPermission = inheritedByPermission;
    }
    
}
