/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role;

import edu.mac.malwarereport.account.applicationFacade.SubjectRoleApplicationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.permission.dto.PermissionDTO;
import edu.mac.malwarereport.role.applicationFacade.RoleApplicationFacade;
import edu.mac.malwarereport.role.applicationFacade.RolePermissionApplicationFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletRequest;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Named("rolebeans")
@RequestScoped
public class RoleBeans implements Serializable{
   
    private RoleDTO selectedRole = new RoleDTO();
    
    private List<RoleDTO> indirectInheritance = new ArrayList<>();
    
    private List<RoleDTO> inheritedBy = new ArrayList<>();
    
    private List<PermissionDTO> currentPermission = new ArrayList<>();
    
    private List<AccountDTO> users = new ArrayList<>();
    
    @Inject
    private RoleApplicationFacade roleApplicationFacade;
    
    @Inject
    private RolePermissionApplicationFacade rolePermissionApplicationFacade;
    
    @Inject
    private SubjectRoleApplicationFacade subjectRoleApplicationFacade;
    
    @PostConstruct
     public void init(){
        try{
    
            indirectInheritance = new ArrayList<>();

            inheritedBy = new ArrayList<>();

            currentPermission = new ArrayList<>();
            
            HttpServletRequest req = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
            //this is to request the 'id' which is the variable at the end on the url 
            String suuid = req.getParameter("id");
            //find the report by the 'id'
            RoleDTO inputRoleDTO = new RoleDTO();
            inputRoleDTO.setSuuid(suuid);
            selectedRole = roleApplicationFacade.findBySuuid(inputRoleDTO);
            users = subjectRoleApplicationFacade.getAllAccountByRole(selectedRole);
            onSelectRole();
            
        for(PermissionDTO eachPermissionDTO : rolePermissionApplicationFacade.getAllPermissionByRole(selectedRole)){
                System.out.print(eachPermissionDTO.getName());
                if(!currentPermission.stream().map(PermissionDTO::getSuuid).filter(eachPermissionDTO.getSuuid()::equals).findFirst().isPresent())
                currentPermission.add(eachPermissionDTO);
            }
        for(RoleDTO roleDTO : selectedRole.getInheritance(selectedRole)){
            System.out.print(roleDTO.getName());
            for(PermissionDTO eachPermissionDTO : rolePermissionApplicationFacade.getAllPermissionByRole(roleDTO)){
                System.out.print(eachPermissionDTO.getName());
                if(!currentPermission.stream().map(PermissionDTO::getSuuid).filter(eachPermissionDTO.getSuuid()::equals).findFirst().isPresent())
                currentPermission.add(eachPermissionDTO);
            }
        }
        }catch(Exception e){
            FacesContext.getCurrentInstance().getViewRoot().getViewMap().remove("rolebeans");
        }
        
    }
     
   
//    public void getIndirectInheritance(RoleDTO roleDTO){
//            for(RoleDTO child : roleDTO.getChildren()){
//                indirectInheritance.add(child);
//                getIndirectInheritance(child);
//            }
//            
//    }
    
    public void onSelectRole() {
        indirectInheritance = new ArrayList<>();
        for (RoleDTO eachCurrentRole : selectedRole.getChildren()) {
            List<RoleDTO> indirectInheritedRoleCheck = eachCurrentRole.getInheritance(eachCurrentRole);
            for (RoleDTO eachInheritRole : indirectInheritedRoleCheck) {
                if (!containsName(indirectInheritance, eachInheritRole.getSuuid())) {
                    indirectInheritance.add(eachInheritRole);
//                    for(RoleDTO eachAvailableRole:availableRoles){
//                        if(eachAvailableRole.getSuuid()==eachInheritRole.getSuuid()){
//                            availableRoles.remove(eachAvailableRole);
//                            break;
//                        }
//                    }
                }

            }
        }
        
        //show all parent
        inheritedBy = new ArrayList();
            List<RoleDTO> inheritedByCheck = selectedRole.getAllInheritedBy(selectedRole);
            for (RoleDTO eachInheritByRole : inheritedByCheck) {
                if (!containsName(inheritedBy, eachInheritByRole.getSuuid())) {
                    inheritedBy.add(eachInheritByRole);
//                    for(RoleDTO eachAvailableRole:availableRoles){
//                        if(eachAvailableRole.getSuuid()==eachInheritRole.getSuuid()){
//                            availableRoles.remove(eachAvailableRole);
//                            break;
//                        }
//                    }
                }
        }

    }
    
    public boolean containsName(final List<RoleDTO> list, final String suuid) {
        return list.stream().map(RoleDTO::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }
    
   
    
     /**
     * @return the selectedRole
     */
    public RoleDTO getSelectedRole() {
        return selectedRole;
    }

    /**
     * @param selectedRole the selectedRole to set
     */
    public void setSelectedRole(RoleDTO selectedRole) {
        this.selectedRole = selectedRole;
    }

    /**
     * @return the indirectInheritance
     */
    public List<RoleDTO> getIndirectInheritance() {
        return indirectInheritance;
    }

    /**
     * @param indirectInheritance the indirectInheritance to set
     */
    public void setIndirectInheritance(List<RoleDTO> indirectInheritance) {
        this.indirectInheritance = indirectInheritance;
    }

    /**
     * @return the inheritedBy
     */
    public List<RoleDTO> getInheritedBy() {
        return inheritedBy;
    }

    /**
     * @param inheritedBy the inheritedBy to set
     */
    public void setInheritedBy(List<RoleDTO> inheritedBy) {
        this.inheritedBy = inheritedBy;
    }

    /**
     * @return the currentPermission
     */
    public List<PermissionDTO> getCurrentPermission() {
        return currentPermission;
    }

    /**
     * @param currentPermission the currentPermission to set
     */
    public void setCurrentPermission(List<PermissionDTO> currentPermission) {
        this.currentPermission = currentPermission;
    }

    /**
     * @return the users
     */
    public List<AccountDTO> getUsers() {
        return users;
    }

    /**
     * @param users the users to set
     */
    public void setUsers(List<AccountDTO> users) {
        this.users = users;
    }
    
    
}
