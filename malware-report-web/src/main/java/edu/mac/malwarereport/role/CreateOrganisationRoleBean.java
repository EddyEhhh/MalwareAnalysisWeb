 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role;

import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.ERROR;
import static edu.mac.malwarereport.account.outputInfo.OutcomeStatus.SUCCESS;
import edu.mac.malwarereport.permission.applicationFacade.PermissionApplicationFacade;
import edu.mac.malwarereport.permission.dto.PermissionDTO;
import edu.mac.malwarereport.role.applicationFacade.RoleApplicationFacade;
import edu.mac.malwarereport.role.applicationFacade.RoleOrganisationApplicationFacade;
import edu.mac.malwarereport.role.applicationFacade.RolePermissionApplicationFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import static edu.mac.malwarereport.role.outputInfo.RoleMappingStatus.EXIST;
import static edu.mac.malwarereport.role.outputInfo.RoleMappingStatus.INVALID_INHERITANCE;
import static edu.mac.malwarereport.role.outputInfo.RoleMappingStatus.INVALID_INPUT_SELF;
import jakarta.annotation.PostConstruct;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.PrimeFaces;

/**
 *
 * @author Jaibun Thana
 */
@ViewScoped
@Named("createOrganiastionRoleBean")
public class CreateOrganisationRoleBean implements Serializable{

    @Inject
    private RoleOrganisationApplicationFacade roleOrganisationApplicationFacade;
    
    @Inject 
    private RoleApplicationFacade roleApplicationFacade;

    @Inject
    private FacesContext facesContext;
    
    @Inject
    private RolePermissionApplicationFacade rolePermissionApplicationFacade;
    
    @Inject
    private PermissionApplicationFacade permissionApplicationFacade;
    
    private List<RoleDTO> selectedRole = new ArrayList<RoleDTO>();

    private List<RoleDTO> availableRoles = new ArrayList<RoleDTO>();

    private List<RoleDTO> indirectInheritedRole = new ArrayList<>();
        
//    private Map<String, List<PermissionDTO>> selectedPermission = new HashMap<String, List<PermissionDTO>>();
    
    private List<PermissionDTO> selectedPermission = new ArrayList<>();

    private List<PermissionDTO> inheritedPermission = new ArrayList<>();
    
//    private HashMap<String, List<PermissionDTO>> availablePermission = new HashMap<String, List<PermissionDTO>>();

    private List<PermissionDTO> availablePermission = new ArrayList<>();

    private PrimeFaces primeFaces = PrimeFaces.current();

    private RoleDTO roleDTO = new RoleDTO();
    
    @PostConstruct
    public void init(){
        availableRoles = roleOrganisationApplicationFacade.getRoleList();
        showPermission();
        onSelectRole();
//        selectedPermission.add(availablePermission.get("ACCOUNT").get(0));
    }

    public void createRole() throws Exception {
        roleDTO.setChildren(selectedRole);
//        for(String eachCategory : selectedPermission.keySet()){
//            System.out.print(eachCategory);
//            System.out.print(selectedPermission.get(eachCategory));
//            for(PermissionDTO eachPermission : selectedPermission.get(eachCategory)){
//                System.out.print("A4");
//                rawSelectedPermission.add(eachPermission);
//                System.out.print(eachPermission);
//            }
//        }
        switch (roleApplicationFacade.create(roleDTO, selectedPermission)) {
            
            case SUCCESS:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Successfully created role", null));
                roleDTO = new RoleDTO();
                selectedPermission = new ArrayList<>();
                selectedRole = new ArrayList<RoleDTO>();
                availableRoles = roleOrganisationApplicationFacade.getRoleList();
                primeFaces.ajax().update("roleForm");
                primeFaces.executeScript("PF('addRoleDialog').hide();");
                primeFaces.ajax().update("createRoleForm");
                break;
            case EXIST:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Role name already exist", null));
                break;
            case INVALID_INPUT_SELF:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Cannot inherit itself", null));
                break;
            case INVALID_INHERITANCE:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid inheritance", null));
                break;
            case ERROR:
            default:
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Oops something went wrong!", null));
                break;
        }
    }

    public void onSelectRole() {
//        selectedPermission = new ArrayList<>();
        indirectInheritedRole = new ArrayList<>();
        inheritedPermission = new ArrayList<>();
        for (RoleDTO eachCurrentRole : selectedRole) {
            
            List<RoleDTO> indirectInheritedRoleCheck = eachCurrentRole.getInheritance(eachCurrentRole);
            for (RoleDTO eachInheritRole : indirectInheritedRoleCheck) {
                if (!containsName(indirectInheritedRole, eachInheritRole.getSuuid())) {
                    indirectInheritedRole.add(eachInheritRole);
//                    for(RoleDTO eachAvailableRole:availableRoles){
//                        if(eachAvailableRole.getSuuid()==eachInheritRole.getSuuid()){
//                            availableRoles.remove(eachAvailableRole);
//                            break;
//                        }
//                    }
                }
            }
            
            //get all permission
            for (RoleDTO eachRoleInheritedList : eachCurrentRole.getInheritance(eachCurrentRole)) {
                for (PermissionDTO eachPermissionDTO : rolePermissionApplicationFacade.getAllPermissionByRole(eachRoleInheritedList)) {
                    if(!containsPermissionSuuid(inheritedPermission, eachPermissionDTO.getSuuid()));
//                    System.out.print("PERMISSION: " + eachPermissionDTO.getSuuid());
                    inheritedPermission.add(eachPermissionDTO);
                }
            }
                for (PermissionDTO eachPermissionDTO : rolePermissionApplicationFacade.getAllPermissionByRole(eachCurrentRole)) {
                    if(!containsPermissionSuuid(inheritedPermission, eachPermissionDTO.getSuuid()));
//                    System.out.print("PERMISSION: " + eachPermissionDTO.getSuuid());
                    inheritedPermission.add(eachPermissionDTO);
                }
                //add to selected all inherited permission
               //FORCE SELECT (DO NOT REMOVE)
//               for (PermissionDTO eachInheritedPermission : inheritedPermission) {
//                for (PermissionDTO eachAvailablePermission : availablePermission) {
//                    if (eachInheritedPermission.getSuuid().equals(eachAvailablePermission.getSuuid())) {
//                        selectedPermission.add(eachAvailablePermission);
//                    }
//                }
//                    
////                    for(Map.Entry<String, List<PermissionDTO>> entry : availablePermission.entrySet()){
////                        for(int i = 0 ; i < entry.getValue().size() ; i++){
////                            if(eachInheritedPermission.getSuuid().equals(entry.getValue().get(i).getSuuid())){
////                                selectedPermission.get(eachInheritedPermission.getCategory()).add(eachInheritedPermission);
////                                System.out.print("Add to select: " + entry.getValue().get(i).getName());
////                            }
////                        }
////
////                    }
//                    
//                }
            
        }        

    }
    
    
    public void showPermission(){
        availablePermission = permissionApplicationFacade.findAllUserAvailablePermission();
        //FUTURE IMPLEMENTATION: show permission in category
//        //Get all user permission
//        for(PermissionDTO eachPermission : permissionManager.findAllUserAvailablePermission()){
//            List<PermissionDTO> listPermission = new ArrayList<>();
//            //Check if category(key) already exist
//            if(!availablePermission.containsKey(eachPermission.getCategory())){
//                listPermission.add(eachPermission);
//                availablePermission.put(eachPermission.getCategory(), listPermission);
//            //else add permission to existing category
//            }else{ 
//                listPermission = availablePermission.get(eachPermission.getCategory());
//                listPermission.add(eachPermission);
//                availablePermission.put(eachPermission.getCategory(), listPermission);
//            }            
//        }
        
//        //get each Category(Key):All Permission(Value)
//        for(Map.Entry<String, List<PermissionDTO>> entry : availablePermission.entrySet()){
//            SelectItemGroup tempSelectItemGroup = new SelectItemGroup(entry.getKey());
//            List<SelectItem> tempSelectItem = new ArrayList<>();
//            //Get individual permission from category
//            for(PermissionDTO eachPermissionDTO : entry.getValue()){
//                //add permission, label to selectItem
//                tempSelectItem.add(new SelectItem(eachPermissionDTO, eachPermissionDTO.getName()));
//            }
//            //Add each category into select item
//            tempSelectItemGroup.setSelectItems(tempSelectItem.stream().toArray(SelectItem[] ::new));
//            availablePermission.add(tempSelectItemGroup);
//            
//        }
       
    }

    public boolean containsName(List<RoleDTO> list, String suuid) {
        return list.stream().map(RoleDTO::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }
    
    public boolean containsPermissionSuuid(List<PermissionDTO> list, String suuid) {
        
//        System.out.print("-----------SUUID: " + suuid);
//        for(PermissionDTO tempPermissionDTO : list){
//            System.out.print("INHERIT PERM: " + tempPermissionDTO.getSuuid());
//        }
//        System.out.print(list.stream().map(PermissionDTO::getSuuid).filter(suuid::equals).findFirst().isPresent());
        return list.stream().map(PermissionDTO::getSuuid).filter(suuid::equals).findFirst().isPresent();
    }

    /**
     * @return the roleDTO
     */
    public RoleDTO getRoleDTO() {
        return roleDTO;
    }

    /**
     * @param roleDTO the roleDTO to set
     */
    public void setRoleDTO(RoleDTO roleDTO) {
        this.roleDTO = roleDTO;
    }

    /**
     * @return the availableRoles
     */
    public List<RoleDTO> getAvailableRoles() {
        return availableRoles;
    }

    /**
     * @param availableRoles the availableRoles to set
     */
    public void setAvailableRoles(List<RoleDTO> availableRoles) {
        this.availableRoles = availableRoles;
    }

    /**
     * @return the indirectInheritedRole
     */
    public List<RoleDTO> getIndirectInheritedRole() {
        return indirectInheritedRole;
    }

    /**
     * @param indirectInheritedRole the indirectInheritedRole to set
     */
    public void setIndirectInheritedRole(List<RoleDTO> indirectInheritedRole) {
        this.indirectInheritedRole = indirectInheritedRole;
    }

    /**
     * @return the selectedRole
     */
    public List<RoleDTO> getSelectedRole() {
        return selectedRole;
    }

    /**
     * @param selectedRole the selectedRole to set
     */
    public void setSelectedRole(List<RoleDTO> selectedRole) {
        this.selectedRole = selectedRole;
    }

    /**
     * @return the selectedPermission
     */
    public List<PermissionDTO> getSelectedPermission() {
        return selectedPermission;
    }

    /**
     * @param selectedPermission the selectedPermission to set
     */
    public void setSelectedPermission(List<PermissionDTO>selectedPermission) {
        this.selectedPermission = selectedPermission;
    }

    /**
     * @return the inheritedPermission
     */
    public List<PermissionDTO> getInheritedPermission() {
        return inheritedPermission;
    }

    /**
     * @param inheritedPermission the inheritedPermission to set
     */
    public void setInheritedPermission(List<PermissionDTO> inheritedPermission) {
        this.inheritedPermission = inheritedPermission;
    }

    /**
     * @return the availablePermission
     */
    public List<PermissionDTO> getAvailablePermission() {
        return availablePermission;
    }

    /**
     * @param availablePermission the availablePermission to set
     */
    public void setAvailablePermission(List<PermissionDTO> availablePermission) {
        this.availablePermission = availablePermission;
    }

}
