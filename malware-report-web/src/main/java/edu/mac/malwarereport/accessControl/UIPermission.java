/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.accessControl;

import edu.mac.malwarereport.permission.applicationFacade.PermissionApplicationFacade;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;

/**
 *
 * @author Jaibun Thana
 */
@RequestScoped
@Named
public class UIPermission {

    
    private boolean viewProfile;
    private boolean viewUserDetail;
    private boolean viewRoles;
    private boolean viewRoleDetail;
    private boolean viewReport;
    private boolean viewReportDetail;
    private boolean viewOrganisationDetail;
    private boolean viewAccounts;
    private boolean uploadSample;
    private boolean editUserDetail;
    private boolean editRole;
    private boolean editProfile;
    private boolean editOrganisationDetail;
    private boolean deleteUser;
    private boolean deleteRole;
    private boolean createUser;
    private boolean createRole;
    private boolean changePassword;
    private boolean assignRole;
    private boolean viewHeuristicReport;
    
    
    @Inject
    private PermissionApplicationFacade permissionApplicationFacade;
    
    //Can view own profile
    public boolean isViewProfile() {
        this.viewProfile = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.ReadAccountApplicationFacade.getCurrentAccount"
                , "SELF");
        return viewProfile;
    }

    //Can view account details
    public boolean isViewUserDetail() {
        this.viewUserDetail = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.ReadAccountApplicationFacade.findBySuuid"
                , "INTERNAL");
        return viewUserDetail;
    }

    public boolean isViewRoles() {
        this.viewRoles = (permissionApplicationFacade.hasPermission("edu.mac.malwarereport.role.applicationFacade.RoleOrganisationApplicationFacade.getRoleList"
                , "INTERNAL"));
        return viewRoles;
    }

    public boolean isViewRoleDetail() {
        this.viewRoleDetail = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.role.applicationFacade.RoleApplicationFacade.findBySuuid"
                , "INTERNAL");
        return viewRoleDetail;
    }

    public boolean isViewReport() {
        this.viewReport = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.report.applicationFacade.ReportOrganisationApplicationFacade.getSampleList"
                , "INTERNAL");
        return viewReport;
    }

    public boolean isViewReportDetail() {
        this.viewReportDetail = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.report.applicationFacade.SampleApplicationFacade.findByUuid"
                , "INTERNAL");
        return viewReportDetail;
    }

    public boolean isViewOrganisationDetail() {
        this.viewOrganisationDetail = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade.getCurrentOrganisation"
        , "INTERNAL");
        return viewOrganisationDetail;
    }

    public boolean isViewAccounts() {
        this.viewAccounts = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade.getAccountList"
        , "INTERNAL");
        return viewAccounts;
    }

    public boolean isUploadSample() {
        this.uploadSample = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.report.applicationFacade.UploadFileApplicationFacade.isUploadFile"
        , "INTERNAL");
        return uploadSample;
    }

    public boolean isEditUserDetail() {
        this.editUserDetail = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.AccountApplicationFacade.updateAccount"
        , "INTERNAL");
        return editUserDetail;
    }

    public boolean isEditRole() {
        this.editRole = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.role.applicationFacade.RoleApplicationFacade.update"
        , "INTERNAL");
        return editRole;
    }

    public boolean isEditProfile() {
        this.editProfile = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.AccountApplicationFacade.updateAccount"
        , "SELF");
        return editProfile;
    }

    public boolean isEditOrganisationDetail() {
        this.editOrganisationDetail = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.AccountOrganisationApplicationFacade.updateOrganisation"
        , "INTERNAL");
        return editOrganisationDetail;
    }

    public boolean isDeleteUser() {
        this.deleteUser = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.AccountApplicationFacade.delete"
        , "INTERNAL");
        return deleteUser;
    }

    public boolean isDeleteRole() {
        this.deleteRole = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.role.applicationFacade.RoleOrganisationApplicationFacade.deleteRoleOrganisation"
        , "INTERNAL");
        return deleteRole;
    }

    public boolean isCreateUser() {
        this.createUser = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.AccountApplicationFacade.register"
        , "INTERNAL");
        return createUser;
    }

    public boolean isCreateRole() {
        this.createRole = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.role.applicationFacade.RoleApplicationFacade.create"
        , "INTERNAL");
        return createRole;
    }

    public boolean isChangePassword() {
        this.changePassword = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.PasswordApplicationFacade.changePassword"
        , "SELF");
        return changePassword;
    }

    public boolean isAssignRole() {
        this.assignRole = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.account.applicationFacade.SubjectRoleApplicationFacade.createMultiMapping"
        , "INTERNAL");
        return assignRole;
    }
    
    public boolean isViewHeuristicReport() {
        this.viewHeuristicReport = permissionApplicationFacade.hasPermission("edu.mac.malwarereport.report.applicationFacade.ViewPDFApplicationFacade.getPDF"
        , "INTERNAL");
        return viewHeuristicReport;
    }
    
    
    /**
     * @param viewProfile the viewProfile to set
     */
    public void setViewProfile(boolean viewProfile) {
        this.viewProfile = viewProfile;
    }

    /**
     * @param viewUserDetail the viewUserDetail to set
     */
    public void setViewUserDetail(boolean viewUserDetail) {
        this.viewUserDetail = viewUserDetail;
    }

    /**
     * @param viewRoles the viewRoles to set
     */
    public void setViewRoles(boolean viewRoles) {
        this.viewRoles = viewRoles;
    }

    /**
     * @param viewRoleDetail the viewRoleDetail to set
     */
    public void setViewRoleDetail(boolean viewRoleDetail) {
        this.viewRoleDetail = viewRoleDetail;
    }

    /**
     * @param viewReport the viewReport to set
     */
    public void setViewReport(boolean viewReport) {
        this.viewReport = viewReport;
    }

    /**
     * @param viewReportDetail the viewReportDetail to set
     */
    public void setViewReportDetail(boolean viewReportDetail) {
        this.viewReportDetail = viewReportDetail;
    }

    /**
     * @param viewOrganisationDetail the viewOrganisationDetail to set
     */
    public void setViewOrganisationDetail(boolean viewOrganisationDetail) {
        this.viewOrganisationDetail = viewOrganisationDetail;
    }

    /**
     * @param viewAccounts the viewAccounts to set
     */
    public void setViewAccounts(boolean viewAccounts) {
        this.viewAccounts = viewAccounts;
    }

    /**
     * @param uploadSample the uploadSample to set
     */
    public void setUploadSample(boolean uploadSample) {
        this.uploadSample = uploadSample;
    }

    /**
     * @param editUserDetail the editUserDetail to set
     */
    public void setEditUserDetail(boolean editUserDetail) {
        this.editUserDetail = editUserDetail;
    }

    /**
     * @param editRole the editRole to set
     */
    public void setEditRole(boolean editRole) {
        this.editRole = editRole;
    }

    /**
     * @param editProfile the editProfile to set
     */
    public void setEditProfile(boolean editProfile) {
        this.editProfile = editProfile;
    }

    /**
     * @param editOrganisationDetail the editOrganisationDetail to set
     */
    public void setEditOrganisationDetail(boolean editOrganisationDetail) {
        this.editOrganisationDetail = editOrganisationDetail;
    }

    /**
     * @param deleteUser the deleteUser to set
     */
    public void setDeleteUser(boolean deleteUser) {
        this.deleteUser = deleteUser;
    }

    /**
     * @param deleteRole the deleteRole to set
     */
    public void setDeleteRole(boolean deleteRole) {
        this.deleteRole = deleteRole;
    }

    /**
     * @param createUser the createUser to set
     */
    public void setCreateUser(boolean createUser) {
        this.createUser = createUser;
    }

    /**
     * @param createRole the createRole to set
     */
    public void setCreateRole(boolean createRole) {
        this.createRole = createRole;
    }

    /**
     * @param changePassword the changePassword to set
     */
    public void setChangePassword(boolean changePassword) {
        this.changePassword = changePassword;
    }

    /**
     * @param permissionApplicationFacade the permissionApplicationFacade to set
     */
    public void setPermissionApplicationFacade(PermissionApplicationFacade permissionApplicationFacade) {
        this.permissionApplicationFacade = permissionApplicationFacade;
    }

    /**
     * @param viewHeuristicReport the viewHeuristicReport to set
     */
    public void setViewHeuristicReport(boolean viewHeuristicReport) {
        this.viewHeuristicReport = viewHeuristicReport;
    }
    
}
