/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.report.upload;

import jakarta.ejb.Schedule;
import jakarta.ejb.Singleton;
import jakarta.ejb.Startup;

/**
 *
 * @author tohyu
 */
@Singleton()
@Startup
public class FileTransfer {

    private static String keyStorePath = "D:/MP Stuff/MP/MLAB Major Project G22/SSL/webKeyStore";
    private static String trustStorePath = "D:/MP Stuff/MP/MLAB Major Project G22/SSL/truststore";

    static {
        onStartup();
        System.out.println("File Transfer constructed !");
    }

   // @Schedule(hour = "*", minute = "*", persistent = false)
    public static void onStartup() {

        new Thread(new Runnable() {
            @Override
            public void run() {

                // Listens for Ctrl+C
//        Runtime.getRuntime().addShutdownHook(
//            new Thread(() -> {
//            Thread.currentThread().setName("Ctrl+C Listener");
//            System.out.println("[" + Thread.currentThread().getName() + "] Shutting down program...");
//            RabbitMQ.intentionalClose = true;
//            RabbitMQ.closeChannel();
//            })
//        );
                // Opens a connection to RabbitMQ on the Controller VM
                RabbitMQ.connect(RabbitMQ.newConnFactory("guest", "guest", keyStorePath, trustStorePath), (byte)1);
                System.out.println("Creating TCP Sockets");

                // Sockets for transferral of uploaded files to Repo VM
                TLS.JavaSocket.socketList.add(new TLS.JavaSocket.SocketInfo("10.242.248.1", 991, 995, "client", "artefact"));
                // ServerSockets for transferral of analysis reports by Web VM
                TLS.JavaSocket.socketList.add(new TLS.JavaSocket.SocketInfo("10.242.248.2", 996, 1000, "server", "report"));

                System.out.println("Starting Connection");
                // Sets up all necessary socket connection with the Repo VM
                TLS.JavaSocket.connectionSetup(keyStorePath, trustStorePath);

                System.out.println("Connection Stopped");
            }

        }).start();

    }
}
