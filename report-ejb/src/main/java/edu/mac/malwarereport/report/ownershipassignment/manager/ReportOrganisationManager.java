/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.report.ownershipassignment.manager;

import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.report.outputInfo.OutcomeStatus;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.ownership.outputinfo.MappingStatus;
import edu.mac.malwarereport.report.data.SampleFacade;
import edu.mac.malwarereport.report.dto.SampleDTO;
import edu.mac.malwarereport.report.ownershipassignment.mapper.ReportOrganisationMapper;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class ReportOrganisationManager {

    @Inject
    private ReportOrganisationMapper reportOrganisationMapper;
    
    @Inject
    private AccountOrganisationMapper accountOrganisationMapper;

    @Inject
    private Authenticate authenticate;

    @Inject
    private SampleFacade sampleFacade;

    public List<SampleDTO> getSampleList() {
        Long accountId = authenticate.getCurrentAccount().getId();
        Long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        List<Long> sampleIdList = reportOrganisationMapper.getSampleIdList(organisationId);
        List<SampleDTO> sampleDTOList = new ArrayList<>();
        for (Long tempSampleId : sampleIdList) {
            sampleDTOList.add(sampleFacade.find(tempSampleId).toDTO());
        }
        return sampleDTOList;
    }
    
    public int countSampleList() {
        Long accountId = authenticate.getCurrentAccount().getId();
        Long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        return reportOrganisationMapper.countSample(organisationId);
    }
    
    public MappingStatus createMapping(SampleDTO sampleDTO, String organisationSuuid){
        try{
        long sampleId = sampleFacade.getSampleBySuuid(sampleDTO.getSuuid()).getId();
        long organisationId = reportOrganisationMapper.getOrganisationId(organisationSuuid);
        return reportOrganisationMapper.createMapping(organisationId, sampleId);
    }catch (Exception e){
    return MappingStatus.FAILURE;
}
    }
    
    public OutcomeStatus deleteMapping(SampleDTO sampleDTO){
        String sampleSuuid = sampleDTO.getSuuid();
        long sampleId = sampleFacade.getSampleBySuuid(sampleSuuid).getId();
        reportOrganisationMapper.deleteMappingBySampleId(sampleId);
        return OutcomeStatus.SUCCESS;
    }
    
//    public OutcomeStatus sampleToOrganisation(AccountDTO accountDTO) throws Exception {
//        try {
//        switch (sampleManager.register(accountDTO)) {
//            case SUCCESS:
//                long newAccountId = accountFacade.getAccount(accountDTO.getEmail()).getId();
//                long currentAccountId = authenticate.getCurrentAccount().getId();
//                long organisationId = reportOrganisationMapper.getOrganisationId(currentAccountId);
//                reportOrganisationMapper.createMapping(organisationId, newAccountId);
//                return RegisterStatus.SUCCESS;
//            case EMAIL_EXIST:
//                return RegisterStatus.EMAIL_EXIST;
//            default:
//                return RegisterStatus.FAILURE;
//                
//        }
//            } catch (Exception e) {
//                return RegisterStatus.FAILURE;
//        }
//    }

}
