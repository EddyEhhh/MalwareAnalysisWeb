/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.ownershipassignment.interceptor;

import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.entity.Account;
import edu.mac.malwarereport.ownership.outputinfo.MappingStatus;
import edu.mac.malwarereport.personnel.entity.OwnershipAssignment;
import edu.mac.malwarereport.personnel.manager.OwnershipAssignmentManager;
import jakarta.inject.Inject;
import jakarta.interceptor.AroundInvoke;
import jakarta.interceptor.Interceptor;
import jakarta.interceptor.InvocationContext;

/**
 *
 * @author E
 */
@AccountOrganisationAC
@Interceptor
public class AccountOrganisationACInterceptor {

    @Inject
    private Authenticate authenticate;
    
    @Inject
    private OwnershipAssignmentManager ownershipAssignmentManager;

    public AccountOrganisationACInterceptor() {

    }

    //ADD CHECK PERMISSION 
    //Checks if user is from the same organisation
    @AroundInvoke
    public Object AccoutOrganisationAC(InvocationContext ctx) throws Exception {
        //get staffDTO parameter
        Object[] parameters = ctx.getParameters();
        Long organisationId = (long) parameters[0];
        Long accountId = authenticate.getCurrentAccount().getId();
        OwnershipAssignment ownershipAssignment = new OwnershipAssignment(organisationId, "org", accountId, "acc");
        if(ownershipAssignmentManager.isMapped(ownershipAssignment)){
            return ctx.proceed();
        }
            return MappingStatus.FAILURE;
    }

}
