/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.ownershipassignment.manager;

import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.data.AccountFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.account.manager.AccountManager;
import edu.mac.malwarereport.account.outputInfo.OutcomeStatus;
import edu.mac.malwarereport.account.outputInfo.RegisterStatus;
import static edu.mac.malwarereport.account.outputInfo.RegisterStatus.EMAIL_EXIST;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.account.subjectassignment.mapper.SubjectRoleMapper;
import edu.mac.malwarereport.organisation.data.OrganisationFacade;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import edu.mac.malwarereport.organisation.dto.SettingDTO;
import edu.mac.malwarereport.organisation.entity.Organisation;
import edu.mac.malwarereport.organisation.outputinfo.UpdateOrganisationStatus;
import edu.mac.malwarereport.ownership.outputinfo.MappingStatus;
import edu.mac.malwarereport.role.data.RoleFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class AccountOrganisationManager {

    @Inject
    private AccountOrganisationMapper accountOrganisationMapper;

    @Inject
    private Authenticate authenticate;

    @Inject
    private AccountFacade accountFacade;
    
    @Inject
    private OrganisationFacade organisationFacade;

    @Inject
    private AccountManager accountManager;
    
    public OrganisationDTO getOrganisation(AccountDTO accountDTO){
        Long accountId = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
        Long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        return organisationFacade.find(organisationId).toDTO();
    }

    public List<AccountDTO> getAccountList() {
        Long accountId = authenticate.getCurrentAccount().getId();
        Long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        List<Long> accountIdList = accountOrganisationMapper.getAccountIdList(organisationId);
        List<AccountDTO> accountDTOList = new ArrayList<>();
        for (Long tempAccountId : accountIdList) {
            accountDTOList.add(accountFacade.find(tempAccountId).toDTO());
        }
        return accountDTOList;
    }
    
    public List<AccountDTO> getAllAccountByOrganisation(OrganisationDTO organisationDTO){
        long organisationId = organisationFacade.getOrganisationBySuuid(organisationDTO.getSuuid()).getId();
        List<Long> accountIdList = accountOrganisationMapper.getAccountIdList(organisationId);
        List<AccountDTO> accountDTOList = new ArrayList<>();
        for(Long accountId : accountIdList){
            accountDTOList.add(accountFacade.find(accountId).toDTO());
        }return accountDTOList;
    }
    
    @Inject
    private SubjectRoleMapper subjectRoleMapper;
    
    public List<AccountDTO> getAllManagerByOrganisation(OrganisationDTO organisationDTO){
        System.out.print("Test");
        long organisationId = organisationFacade.getOrganisationBySuuid(organisationDTO.getSuuid()).getId();
        List<Long> accountIdList = accountOrganisationMapper.getAccountIdList(organisationId);
        List<AccountDTO> accountDTOList = new ArrayList<>();
        for(Long accountId : accountIdList){
            for(Long eachRoleId : subjectRoleMapper.getAllRoleIdbyAccount(accountId)){
                System.out.print("Role ID: " + eachRoleId);
                if(eachRoleId.equals(Long.valueOf(2))){
                    accountDTOList.add(accountFacade.find(accountId).toDTO());
                }
            }
        }return accountDTOList;
    }
    
    
    
    public MappingStatus createMapping(AccountDTO accountDTO, String organisationSuuid){
        try{
        long accountId = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
        long organisationId = accountOrganisationMapper.getOrganisationId(organisationSuuid);
        return accountOrganisationMapper.createMapping(organisationId, accountId);
    }catch (Exception e){
    return MappingStatus.FAILURE;
}
    }
    
     public RegisterStatus registerToOrganisation(AccountDTO accountDTO) throws Exception {
        try {
                long newAccountId = accountFacade.getAccount(accountDTO.getEmail()).getId();
                long currentAccountId = authenticate.getCurrentAccount().getId();
                long organisationId = accountOrganisationMapper.getOrganisationId(currentAccountId);
                accountOrganisationMapper.createMapping(organisationId, newAccountId);
                return RegisterStatus.SUCCESS;
            } catch (Exception e) {
                return RegisterStatus.FAILURE;
        }
    }
    
    
//    public RegisterStatus registerToOrganisation(AccountDTO accountDTO) throws Exception {
//        try {
//        switch (accountManager.register(accountDTO)) {
//            case SUCCESS:
//                long newAccountId = accountFacade.getAccount(accountDTO.getEmail()).getId();
//                long currentAccountId = authenticate.getCurrentAccount().getId();
//                long organisationId = accountOrganisationMapper.getOrganisationId(currentAccountId);
//                accountOrganisationMapper.createMapping(organisationId, newAccountId);
//                return RegisterStatus.SUCCESS;
//            case EMAIL_EXIST:
//                return RegisterStatus.EMAIL_EXIST;
//            default:
//                return RegisterStatus.FAILURE;
//                
//        }
//            } catch (Exception e) {
//                return RegisterStatus.FAILURE;
//        }
//    }
//    
     
     
     @Inject
     private RoleFacade roleFacade;
     
    public RegisterStatus registerManager(AccountDTO accountDTO, OrganisationDTO organisationDTO) throws Exception {
        try {
            List<RoleDTO> roleList = new ArrayList<>();
            System.out.print("A0");
            roleList.add(roleFacade.getRoleBySuuid("3bd6ee73-7e5f-4380-85da-f88536aeff15").toDTO());
            System.out.print("A1");
        switch (accountManager.registerWithoutOrganisation(accountDTO, roleList)) {
            case SUCCESS:
                System.out.print("A2");
                long newAccountId = accountFacade.getAccount(accountDTO.getEmail()).getId();
                long organisationId = organisationFacade.getOrganisationBySuuid(organisationDTO.getSuuid()).getId();
                accountOrganisationMapper.createMapping(organisationId, newAccountId);
                return RegisterStatus.SUCCESS;
            case EMAIL_EXIST:
                System.out.print("A3");
                return RegisterStatus.EMAIL_EXIST;
            default:
                System.out.print("A4");
                return RegisterStatus.FAILURE;
                
        }
            } catch (Exception e) {
                System.out.print("A5");
                return RegisterStatus.FAILURE;
        }
    }
    
    public OutcomeStatus deleteMapping(AccountDTO accountDTO){
        try{
        String accountSuuid = accountDTO.getSuuid();
        long accountId = accountFacade.getAccountBySuuid(accountSuuid).getId();
        accountOrganisationMapper.deleteMappingByAccountId(accountId);
        return OutcomeStatus.SUCCESS;
        }catch (Exception e){
            return OutcomeStatus.ERROR;
        }
    }
    
    public int countByCurrentAccount(){
        long currentAccountId = authenticate.getCurrentAccount().getId();
        long organisationId = accountOrganisationMapper.getOrganisationId(currentAccountId);
        return accountOrganisationMapper.countAccount(organisationId);
    }
    
    public int countByOrganiastionId(long organisationId){
        return accountOrganisationMapper.countAccount(organisationId);
    }
    
    public OrganisationDTO getCurrentOrganisation(){
        long accountId = authenticate.getCurrentAccount().getId();
        long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        OrganisationDTO organisationDTO = organisationFacade.find(organisationId).toDTO();
        organisationDTO.setNumberOfMember(accountOrganisationMapper.countAccount(organisationId));
        return organisationDTO;
    }
    
    public boolean isMemberMax(){
        OrganisationDTO organisationDTO = getCurrentOrganisation();
        if(organisationDTO.getNumberOfMember() >= organisationDTO.getSettingDTO().getMaxMember()){
            return true;
        }return false;
    }
    
    public int getMaxUpload(){
        OrganisationDTO organisationDTO = getCurrentOrganisation();
        return organisationDTO.getSettingDTO().getMaxScan();
    }
    
        //update user organisation 
        public UpdateOrganisationStatus updateOrganisation(OrganisationDTO organisationDTO){
            try {

                long accountId = authenticate.getCurrentAccount().getId();
                long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
                Organisation currentOrganisation = organisationFacade.find(organisationId);

                String description = organisationDTO.getDescription();
                SettingDTO settingDTO = organisationDTO.getSettingDTO();

                int maxLoginAttempt = settingDTO.getMaxLoginAttempt();
                int lockoutTime = settingDTO.getLockoutTime();
                currentOrganisation.setDescription(description);

                settingDTO.setLockoutTime(lockoutTime);
                settingDTO.setMaxLoginAttempt(maxLoginAttempt);
                currentOrganisation.setSetting(settingDTO.toObject());
                organisationFacade.edit(currentOrganisation);
                return UpdateOrganisationStatus.SUCCESS;
            } catch (Exception e) {
                return UpdateOrganisationStatus.ERROR;
            }
    }

}
