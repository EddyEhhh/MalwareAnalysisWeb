/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.ownershipassignment.mapper;

import edu.mac.malwarereport.organisation.manager.OrganisationManager;
import edu.mac.malwarereport.ownership.outputinfo.MappingStatus;
import edu.mac.malwarereport.personnel.entity.OwnershipAssignment;
import edu.mac.malwarereport.personnel.manager.OwnershipAssignmentManager;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class AccountOrganisationMapper {
    
    @Inject
    private OwnershipAssignmentManager ownershipAssignmentManager;
    
    @Inject
    private OrganisationManager organisationManager;

    
    public OwnershipAssignment getOwnershipAssignment(){
        String primaryType = "org";
        String secondaryType = "acc";
        OwnershipAssignment organisationAccountAssignment = new OwnershipAssignment(primaryType, secondaryType);
        return organisationAccountAssignment;
    }
    
    public boolean isMappingExist(Long organisationId, Long accId){
        OwnershipAssignment organisationAccountAssignment = getOwnershipAssignment();
        organisationAccountAssignment.setPrimaryId(organisationId);
        organisationAccountAssignment.setSecondaryId(accId);
        return ownershipAssignmentManager.isMapped(organisationAccountAssignment);
    }
    
    
    public long getOrganisationId(String organisationSuuid){
        return organisationManager.getIdBySuuid(organisationSuuid);
    }
    
    public MappingStatus createMapping(Long organisationId, Long accountId){
        OwnershipAssignment organisationAccountAssignment = getOwnershipAssignment();
        try{
            organisationAccountAssignment.setPrimaryId(organisationId);
            organisationAccountAssignment.setSecondaryId(accountId);
            return (ownershipAssignmentManager.create(organisationAccountAssignment));
        }catch (Exception e){
            return MappingStatus.FAILURE;
        }
    }
    
    public List<Long> getAccountIdList(Long organisationId){
        OwnershipAssignment organisationAccountAssignment = getOwnershipAssignment();
        organisationAccountAssignment.setPrimaryId(organisationId);
        return ownershipAssignmentManager.getAllSecondaryId(organisationAccountAssignment);
    }
    
    public long getOrganisationId(Long accountId){
        OwnershipAssignment organisationAccountAssignment = getOwnershipAssignment();
        organisationAccountAssignment.setSecondaryId(accountId);
        return ownershipAssignmentManager.getPrimaryId(organisationAccountAssignment);
    }
    
    public boolean deleteMappingByAccountId(Long accountId){
        OwnershipAssignment organisationAccountAssignment = getOwnershipAssignment();
        organisationAccountAssignment.setSecondaryId(accountId);
        return ownershipAssignmentManager.deleteBySecondary(organisationAccountAssignment);
    }
    
    public int countAccount(long organiastionId){
        OwnershipAssignment organisationAccountAssignment = getOwnershipAssignment();
        organisationAccountAssignment.setPrimaryId(organiastionId);
        return ownershipAssignmentManager.countAllMappingByPrimaryId(organisationAccountAssignment);
    }
    
//    public List<Long> getOrganisationIdList(Long organisationId){
//        organisationAccountAssignment.setPrimaryId(organisationId);
//        return ownershipAssignmentManager.getAllSecondaryId(organisationAccountAssignment);
//    }
    
//    public long getOrganisationId(Long accountId){
//        organisationAccountAssignment.setSecondaryId(accountId);
//        return ownershipAssignmentManager.getPrimaryId(organisationAccountAssignment);
//    }
    
//    public boolean isMapped(Long organisationId, Long accountId){
//        return ownershipAssignmentManager.isMapped(organisationId, organisationDiscriminator, accountId, accountDiscriminator);
//    }
    
    
}
