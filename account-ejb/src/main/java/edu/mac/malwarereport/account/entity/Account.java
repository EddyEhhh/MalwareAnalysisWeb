/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.mac.malwarereport.account.entity;

import edu.mac.malwarereport.account.dto.AccountDTO;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToOne;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import java.util.UUID;

/**
 *
 * @author Jaibun Thana
 */
@Entity
@Table(name = "account")
@NamedQueries({
    @NamedQuery(name = "Account.all", query = "select a from Account a where a.delete = :delete order by a.id"),
    @NamedQuery(name = "Account.byEmail", query = "select a from Account a where a.email = :email and a.delete = :delete"),
    @NamedQuery(name = "Account.byPasswordToken", query = "select a from Account a where a.passwordToken = :passwordToken and a.delete = :delete"),
    @NamedQuery(name = "Account.bySuuid", query = "select a from Account a where a.suuid = :suuid"),
    @NamedQuery(name = "Account.byEmailVerification", query = "select a from Account a where a.emailVerification = :emailVerification and a.delete = :delete")

})
public class Account {

    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    @Email
    @Column(name = "email")
    private String email;
    
    @Column(name = "firstName")
    @Pattern(regexp = "^[A-Za-z]+[A-Za-z ,.'-/]*$", message = "Invalid name")
    @Size(min = 1, max = 64)
    private String firstName;

    @Column(name = "lastName")
    @Pattern(regexp = "^[A-Za-z]+[A-Za-z ,.'-/]*$", message = "Invalid name")
    @Size(min = 1, max = 32)
    private String lastName;

    //8 to 128 character password requiring at least 3 out 4 
    //(uppercase and lowercase letters, numbers and special characters)
    @Pattern(regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&*()-_\\=+[{]}|;:\'\\\",<.>/?])(?=\\S+$).{8,}$",
             message = "Password must contain at least 3 out of 4 (uppercase, lowercase, number or symbol). Minimum 8 Characters")
    @NotBlank
    @Column(name = "password")
    private String password;

    @Column(name = "profilePicture")
    //Only accepts specific file type. Add avoid steg.
    //@Pattern(regexp = "^[\\w\\-. ]+(\\.png)$", message = "Invalid file name")
    private String profilePicture;

    @Column(name = "isFirstLogin")
    private boolean firstLogin;

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(referencedColumnName = "id", name = "emailVerification")
    private EmailVerification emailVerification;

    @Column(name = "isDelete")
    private boolean delete;

    @Column(name = "secretKey2FA")
    private String secretKey2FA;

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(referencedColumnName = "id", name = "passwordToken")
    private PasswordToken passwordToken;

    @Column(name = "suuid")
    private String suuid;

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, optional = false)
    @JoinColumn(referencedColumnName = "id", name = "loginAttempt")
    private LoginAttempt loginAttempt;

    @PrePersist
    public void onCreate() {
        setFirstLogin(true);
        setDelete(false);
        setSuuid(UUID.randomUUID().toString());
        setLoginAttempt(new LoginAttempt());
    }

    public Account() {
    }

    public Account(String email, String firstName, String lastName, String password, String profilePicture, boolean firstLogin, boolean delete, String secretKey2FA) {
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.password = password;
        this.profilePicture = profilePicture;
        this.firstLogin = firstLogin;
        this.delete = delete;
        this.secretKey2FA = secretKey2FA;
    }

    public Account(String email, String firstName, String lastName, String password, String profilePicture) {
        setEmail(email);
        setFirstName(firstName);
        setLastName(lastName);
        setPassword(password);
        setProfilePicture(profilePicture);
        setSuuid(suuid);
    }

    public Account(String email, String password) {
        setEmail(email);
        setPassword(password);
    }

    public AccountDTO toDTO() {
        AccountDTO accountDTO = new AccountDTO(this.getSuuid(), this.getEmail(), this.getFirstName(), this.getLastName(), this.getProfilePicture(), this.isDelete(), this.loginAttempt.getNumberOfAttempt(), this.emailVerification.isVerified());
        return accountDTO;
    }

    public String getFullName() {
        return firstName + " " + lastName;
    }

    /**
     * @return the id
     */
    public Long getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * @return the email
     */
    public String getEmail() {
        return email;
    }

    /**
     * @param email the email to set
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * @return the firstName
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * @param firstName the firstName to set
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * @return the lastName
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * @param lastName the lastName to set
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * @return the password
     */
    public String getPassword() {
        return password;
    }

    /**
     * @param password the password to set
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * @return the profilePicture
     */
    public String getProfilePicture() {
        return profilePicture;
    }

    /**
     * @param profilePicture the profilePicture to set
     */
    public void setProfilePicture(String profilePicture) {
        this.profilePicture = profilePicture;
    }

    /**
     * @return the firstLogin
     */
    public boolean isFirstLogin() {
        return firstLogin;
    }

    /**
     * @param firstLogin the firstLogin to set
     */
    public void setFirstLogin(boolean firstLogin) {
        this.firstLogin = firstLogin;
    }

    /**
     * @return the delete
     */
    public boolean isDelete() {
        return delete;
    }

    /**
     * @param delete the delete to set
     */
    public void setDelete(boolean delete) {
        this.delete = delete;
    }

    /**
     * @return the secretKey2FA
     */
    public String getSecretKey2FA() {
        return secretKey2FA;
    }

    /**
     * @param secretKey2FA the secretKey2FA to set
     */
    public void setSecretKey2FA(String secretKey2FA) {
        this.secretKey2FA = secretKey2FA;
    }

    /**
     * @return the passwordToken
     */
    public PasswordToken getPasswordToken() {
        return passwordToken;
    }

    /**
     * @param passwordToken the passwordToken to set
     */
    public void setPasswordToken(PasswordToken passwordToken) {
        this.passwordToken = passwordToken;
    }

    /**
     * @return the emailVerification
     */
    public EmailVerification getEmailVerification() {
        return emailVerification;
    }

    /**
     * @param emailVerification the emailVerification to set
     */
    public void setEmailVerification(EmailVerification emailVerification) {
        this.emailVerification = emailVerification;
    }

    /**
     * @return the suuid
     */
    public String getSuuid() {
        return suuid;
    }

    /**
     * @param suuid the suuid to set
     */
    public void setSuuid(String suuid) {
        this.suuid = suuid;
    }

    /**
     * @return the failedLoginAttempts
     */
    public LoginAttempt getLoginAttempt() {
        return loginAttempt;
    }

    /**
     * @param failedLoginAttempts the failedLoginAttempts to set
     */
    public void setLoginAttempt(LoginAttempt loginAttempt) {
        this.loginAttempt = loginAttempt;
    }

}
