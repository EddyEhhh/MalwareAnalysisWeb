package edu.mac.malwarereport.account.data;

import edu.mac.malwarereport.account.entity.Account;
import edu.mac.malwarereport.account.entity.EmailVerification;
import edu.mac.malwarereport.account.entity.PasswordToken;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class AccountFacade extends AbstractFacade<Account> {

    @PersistenceContext(unitName = "accountPU")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public AccountFacade() {
        super(Account.class);
    }
    
    //AccountFacades
    public Account getAccount(String email){
        return getEntityManager().createNamedQuery("Account.byEmail", Account.class)
                 .setParameter("email", email)
                 .setParameter("delete", false)
                 .getSingleResult();
    }
    
    public Account getAccountByPasswordTokenId(PasswordToken passwordToken){
        return getEntityManager().createNamedQuery("Account.byPasswordToken", Account.class)
                 .setParameter("passwordToken", passwordToken)
                 .setParameter("delete", false)
                 .getSingleResult();
    }
    
    public Account getAccountByEmailVerification(EmailVerification emailVerification){
        return getEntityManager().createNamedQuery("Account.byEmailVerification", Account.class)
                 .setParameter("emailVerification", emailVerification)
                 .setParameter("delete", false)
                 .getSingleResult();
    }
    
    //Returns if email exist
    public boolean emailExist(String email){
        return !getEntityManager().createNamedQuery("Account.byEmail", Account.class)
                 .setParameter("email", email)
                 .setParameter("delete", false)
                 .getResultList().isEmpty();
    }
    
    //return to find the email
    public Account findByEmail(String email){
        return getEntityManager().createNamedQuery("Account.byEmail", Account.class)
                 .setParameter("email", email)
                 .setParameter("delete", false)
                 .getSingleResult();
        
    }
    
//    public Account getAccountByid(long id){
//        return getEntityManager().createNamedQuery("Account.byId", Account.class)
//                 .setParameter("id", id)
//                 .getSingleResult();
//    }

    public Account getAccountBySuuid(String suuid){
        return getEntityManager().createNamedQuery("Account.bySuuid", Account.class)
                 .setParameter("suuid", suuid)
                 .getSingleResult();
    }
}
