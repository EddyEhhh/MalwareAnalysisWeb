/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.subjectassignment.manager;

import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.data.AccountFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.account.subjectassignment.mapper.SubjectRoleMapper;
import edu.mac.malwarereport.subjectassignment.outputinfo.MappingStatus;
import edu.mac.malwarereport.role.data.RoleFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import edu.mac.malwarereport.role.entity.Role;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class SubjectRoleManager {

    @Inject
    private SubjectRoleMapper subjectRoleMapper;

    @Inject
    private Authenticate authenticate;

    @Inject
    private AccountFacade accountFacade;

    @Inject
    private RoleFacade roleFacade;

//    @Inject
//    private AccountOrganisationMapper accountOrganisationMapper;
//    @Inject
//    private RoleOrganisationMapper roleOrganisationMapper;
    //GET ALL ROLE OF CURRENT ACCOUNT SESSION
    public List<RoleDTO> getAllCurrentRoleDTO() {
        Long accountId = authenticate.getCurrentAccount().getId();
        List<Long> roleIdList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
        List<RoleDTO> roleDTOList = new ArrayList<>();
        for (Long roleId : roleIdList) {
            roleDTOList.add(roleFacade.find(roleId).toDTO());
        }
        return roleDTOList;
    }
    
     public List<Role> getAllCurrentRole() {
        Long accountId = authenticate.getCurrentAccount().getId();
        List<Long> roleIdList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
        List<Role> roleList = new ArrayList<>();
        for (Long roleId : roleIdList) {
            roleList.add(roleFacade.find(roleId));
        }
        return roleList;
    }
    
    

    public List<RoleDTO> getAllCurrentAuthorisedRole() {
        Long accountId = authenticate.getCurrentAccount().getId();
        List<Long> roleIdList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
        inheritance = new ArrayList<>();
        for (Long roleId : roleIdList) {
            getAllInheritance(roleFacade.find(roleId).toDTO());
        }
        return inheritance;
    }

    public List<RoleDTO> getAllIndirectInheritance(RoleDTO roleDTO) {
        inheritance = new ArrayList<>();
        getAllInheritance(roleDTO);
        return inheritance;
    }

    List<RoleDTO> inheritance = new ArrayList<>();
    private void getAllInheritance(RoleDTO roleDTO) {
        for (RoleDTO child : roleDTO.getChildren()) {
            inheritance.add(child);
            getAllInheritance(child);
        }
    }

    //GET ALL ROLE OF AN ACCOUNT
    public List<RoleDTO> getAllRoleByAccount(AccountDTO accountDTO) {
        long accountId = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
        List<Long> roleIdList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
        List<RoleDTO> roleDTOList = new ArrayList<>();
        for (Long roleId : roleIdList) {
            roleDTOList.add(roleFacade.find(roleId).toDTO());
        }
        return roleDTOList;
    }

    //GET ALL ROLE OF AN ACCOUNT
    public List<AccountDTO> getAllAccountByRole(RoleDTO roleDTO) {
        long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
        List<Long> accountIdList = subjectRoleMapper.getAllAccountIdbyRole(roleId);
        List<AccountDTO> accountDTOList = new ArrayList<>();
        for (Long accountId : accountIdList) {
            accountDTOList.add(accountFacade.find(accountId).toDTO());
        }
        return accountDTOList;
    }

    public MappingStatus createMultiMapping(AccountDTO accountDTO, List<RoleDTO> roleDTOList) {
        System.out.print("CREATEMULTI---------------");
        if(roleDTOList.size()<=0){
            return MappingStatus.INVALID_INPUT;
        }
        try {
            long accountId = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
            List<Long> currentRoleList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
            if(currentRoleList.contains(Long.valueOf(2))){
                return MappingStatus.INVALID_INPUT;
            }
            List<Long> roleIdList = new ArrayList<>();
            inheritance = new ArrayList<>();
            List<RoleDTO> indirectInheritedRole = new ArrayList<>();
            //get all individual role inheritance
            for (RoleDTO roleDTO : roleDTOList) {
                getAllInheritance(roleDTO);
            }
            //remove all duplicate inheritance from inputRoleDTO
            for (RoleDTO eachInheritance : inheritance) {
                for (RoleDTO eachInputRole : roleDTOList) {
                    System.out.print(eachInheritance.getName()+eachInputRole.getName());
                    if (eachInheritance.getSuuid() == eachInputRole.getSuuid()) {
                        roleDTOList.remove(eachInputRole);
                        break;
                    }
                }
            }
            //get id of all finalized inputRoleDTO
            for (RoleDTO inputRoleDTO : roleDTOList) {
                try {
                    roleIdList.add(roleFacade.getRoleBySuuid(inputRoleDTO.getSuuid()).getId());
                    //get all duplicate inheritance
                    System.out.print("A3");
                } catch (Exception e) {
                    return MappingStatus.OBJECT_UNFETCHABLE;
                }
            }
            //clear mapping role and update user roles
            subjectRoleMapper.deleteAllMappingByAccountId(accountId);
            for (Long roleId : roleIdList) {
                subjectRoleMapper.createMapping(accountId, roleId);
            }
            return MappingStatus.SUCCESS;
        } catch (Exception e) {
            return MappingStatus.ERROR;
        }
    }

    public int countAccountByRole(RoleDTO roleDTO) {
        long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
        return subjectRoleMapper.countAccountWithRole(roleId);
    }

    public boolean isRoleMapped(RoleDTO roleDTO) {
        long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
        return subjectRoleMapper.isRoleMapped(roleId);
    }

    public MappingStatus deleteMapping(AccountDTO accountDTO, RoleDTO roleDTO) {
        try {
            long accountId = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
            long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
            subjectRoleMapper.deleteMapping(accountId, roleId);
            return MappingStatus.SUCCESS;
        } catch (Exception e) {
            return MappingStatus.FAILURE;
        }
    }

    public MappingStatus deleteAllMappingByAccount(AccountDTO accountDTO) {
        try {
            long accountId = accountFacade.getAccountBySuuid(accountDTO.getSuuid()).getId();
            subjectRoleMapper.deleteAllMappingByAccountId(accountId);
            return MappingStatus.SUCCESS;
        } catch (Exception e) {
            return MappingStatus.FAILURE;
        }
    }
    
    public boolean isAdministrator(){
        Long accountId = authenticate.getCurrentAccount().getId();
        List<Long> roleIdList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
        for(Long eachId : roleIdList){
            if(eachId==1){
                return true;
            }
        }return false;
    }
    
    public boolean isManager(){
        Long accountId = authenticate.getCurrentAccount().getId();
        List<Long> roleIdList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
        for(Long eachId : roleIdList){
            if(eachId==2){
                return true;
            }
        }return false;
    }
    
//    public void isAdministrator(String email){
//        Long accountId = accountFacade.getAccount(email).getId();
//        List<Long> roleIdList = subjectRoleMapper.getAllRoleIdbyAccount(accountId);
//         for(Long eachId : roleIdList){
//            if(eachId==1){
//                System.out.print("Is Admin");
//            }
//        }
//    }
    
    public List<AccountDTO> getAllManager(){
        List<Long> managerIdList = subjectRoleMapper.getAllAccountIdbyRole(Long.valueOf(2));
        List<AccountDTO> managerList = new ArrayList<>();
        for(Long eachId : managerIdList){
            managerList.add(accountFacade.find(eachId).toDTO());
        }return managerList;
    }

}
