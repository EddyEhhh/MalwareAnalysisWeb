/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.manager;

import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.data.AccountFacade;
import edu.mac.malwarereport.account.data.PasswordTokenFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.account.entity.Account;
import edu.mac.malwarereport.account.entity.PasswordToken;
import edu.mac.malwarereport.account.outputInfo.OutcomeStatus;
import edu.mac.malwarereport.account.outputInfo.ResetPasswordStatus;
import edu.mac.malwarereport.account.resource.DateChecker;
import edu.mac.malwarereport.account.resource.SecureTokenGenerator;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.Date;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class PasswordManager {

    @Inject
    private AccountFacade accountFacade;

    @Inject
    private PasswordTokenFacade passwordTokenFacade;

    @Inject
    private SecureTokenGenerator secureTokenGenerator;
    
    @Inject
    private DateChecker dateChecker;
    
    @Inject
    private Authenticate auth;
    
    @Inject
    private MailerManager mailerManager;
    
    public Account generateAccountPasswordToken(Account account){
        String token = secureTokenGenerator.getToken();
        PasswordToken passwordToken = new PasswordToken(token);
        account.setPasswordToken(passwordToken);
        return account;
    }

    public OutcomeStatus createResetPasswordToken(AccountDTO accountDTO) {
        try{
        String email = accountDTO.getEmail();
        Account account = accountFacade.getAccount(email);
        account = generateAccountPasswordToken(account);
        accountFacade.edit(account);
        mailerManager.createResetPasswordToken(account);
        return OutcomeStatus.SUCCESS;
        }catch (Exception e){
            return OutcomeStatus.FAILURE;
        }
    }

    public ResetPasswordStatus resetPassword(AccountDTO accountDTO) {
        String token = accountDTO.getPasswordToken();
        String password = accountDTO.getPassword();
        try {
            PasswordToken passwordToken = passwordTokenFacade.getPasswordToken(token);            
            Date timeout = passwordToken.getTimestamp();
            //delete token
            Account account = accountFacade.getAccountByPasswordTokenId(passwordToken);
            if(dateChecker.isWithinTimeout(timeout, 600)){
                account.setPassword(auth.passwordHasher(password));
                account.setPasswordToken(null);
                accountFacade.edit(account);
            }else{
                return ResetPasswordStatus.TIMEOUT;
            }
            return ResetPasswordStatus.SUCCESS;
        } catch (Exception e) {
            return ResetPasswordStatus.FAILURE;
        }

        //System.out.print(passwordToken.getAccount().getEmail());
        //System.out.print(passwordToken.getAccount().getEmail());
    }
        
        public String changePassword(AccountDTO accountDTO) {
        String password = accountDTO.getCurrentPassword();
        String newPassword = accountDTO.getPassword();
            
        String email = auth.getCurrentUser();
        //Check input password
        if (auth.isCredentialValid(email, password)) {
            System.out.print("isCredentialsValid: " + auth.isCredentialValid(email, password));
            Account account = accountFacade.getAccount(email);
            account.setPassword(auth.passwordHasher(newPassword));
            accountFacade.edit(account);
            System.out.print("New password: " + account.getPassword());
            return "SUCCESS";
        } else {
            return "INVALID_PASSWORD";
        }
    

}
}
