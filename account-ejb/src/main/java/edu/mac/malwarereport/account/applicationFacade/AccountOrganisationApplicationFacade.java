/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.applicationFacade;

import edu.mac.malwarereport.accesscontrol.interceptor.IsAdministratorInterceptor;
import edu.mac.malwarereport.accesscontrol.interceptor.IsPermittedInterceptor;
import edu.mac.malwarereport.accesscontrol.service.interceptor.AccessControlInterceptor;
import edu.mac.malwarereport.account.ownershipassignment.manager.*;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.account.outputInfo.RegisterStatus;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import edu.mac.malwarereport.organisation.outputinfo.UpdateOrganisationStatus;
import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.interceptor.Interceptors;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless

public class AccountOrganisationApplicationFacade {

    @Inject
    private AccountOrganisationManager accountOrganisationManager;

    //Permission: Manager, Internal (View organisation accounts)
    @Interceptors({IsPermittedInterceptor.class})
    public List<AccountDTO> getAccountList() {
        return accountOrganisationManager.getAccountList();
    }
    
    //Permission: Admin ALL (View all organisation account)
    @Interceptors({IsAdministratorInterceptor.class})
    public List<AccountDTO> getAllAccountByOrganisation(OrganisationDTO organisationDTO){
        return accountOrganisationManager.getAllAccountByOrganisation(organisationDTO);
    }
    
    @Interceptors({IsAdministratorInterceptor.class})
    public OrganisationDTO getOrganisation(AccountDTO accoutnDTO){
        return accountOrganisationManager.getOrganisation(accoutnDTO);
    }
    
    @Interceptors({IsAdministratorInterceptor.class})
    public List<AccountDTO> getAllManagerByOrganisation(OrganisationDTO organisationDTO){
        return accountOrganisationManager.getAllManagerByOrganisation(organisationDTO);
    }
     
    //Permission: ADMIN
    @Interceptors({IsAdministratorInterceptor.class})
    public RegisterStatus registerManager(AccountDTO accountDTO, OrganisationDTO organisationDTO) throws Exception {
        return accountOrganisationManager.registerManager(accountDTO, organisationDTO);
    }
    
    //Permission: Internal (Read Organisation Details)
    @Interceptors({IsPermittedInterceptor.class})
    public OrganisationDTO getCurrentOrganisation(){
        return accountOrganisationManager.getCurrentOrganisation();
    }
    
    public int getMaxUpload(){
        return accountOrganisationManager.getMaxUpload();
    }
    
    
    
    //Permission: Internal (Edit organisation details)
    @Interceptors({IsPermittedInterceptor.class})
    public UpdateOrganisationStatus updateOrganisation(OrganisationDTO organisationDTO){
        return accountOrganisationManager.updateOrganisation(organisationDTO);
    }
    
    //Permission: no check if member max
    public boolean isMemberMax(){
        return accountOrganisationManager.isMemberMax();
    }

}
