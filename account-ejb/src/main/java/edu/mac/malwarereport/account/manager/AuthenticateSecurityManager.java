/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.account.manager;

import edu.mac.malwarereport.account.data.AccountFacade;
import edu.mac.malwarereport.account.entity.Account;
import edu.mac.malwarereport.account.entity.LoginAttempt;
import edu.mac.malwarereport.account.outputInfo.OutcomeStatus;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.account.resource.DateChecker;
import edu.mac.malwarereport.organisation.data.OrganisationFacade;
import edu.mac.malwarereport.organisation.entity.Organisation;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jaibun Thana
 */

@Stateless
public class AuthenticateSecurityManager {
    
    @Inject
    private AccountFacade accountFacade;
    
    @Inject 
    private DateChecker dateChecker;
    
    @Inject
    private AccountOrganisationMapper accountOrganisationMapper;
    
    @Inject
    private OrganisationFacade organisationFacade;
    
    @Inject
    private MailerManager mailerManager;
    
    //when the user successfully login, it will reset the login attempt to 0
    public OutcomeStatus resetLoginAttempts(String email){
        try{
        Account account = accountFacade.findByEmail(email);
        LoginAttempt loginAttempt = account.getLoginAttempt();
        loginAttempt.setNumberOfAttempt(0);
        account.setLoginAttempt(loginAttempt);
        accountFacade.edit(account);
        return OutcomeStatus.SUCCESS;
                }catch (Exception e){
                    return OutcomeStatus.FAILURE;
                }
    }
    
    //when the user did not successfully login, it will increase by 1
    public int failedLogin(String email){
        Account account = accountFacade.findByEmail(email);
        LoginAttempt loginAttempt = account.getLoginAttempt();
        int numberOfAttempt = loginAttempt.getNumberOfAttempt();
        numberOfAttempt ++;
        loginAttempt.setNumberOfAttempt(numberOfAttempt);
        account.setLoginAttempt(loginAttempt);
        accountFacade.edit(account);
        Long organisationId = accountOrganisationMapper.getOrganisationId(accountFacade.findByEmail(email).getId());
        Organisation organisation = organisationFacade.find(organisationId);
        int maxLoginAttempt = organisation.getSetting().getMaxLoginAttempt();
        String timeout = String.valueOf(organisation.getSetting().getLockoutTimeInMinute());
        if(numberOfAttempt==maxLoginAttempt){
                new Thread() 
                    {
                       @Override
                       public void run() 
                       {
                           try {
                               mailerManager.bruteForceWarning(account, timeout);
                           } catch (Exception ex) {
                           }
                       }
                    }.start();

        }
        return numberOfAttempt;
    }
    
    
    
}
