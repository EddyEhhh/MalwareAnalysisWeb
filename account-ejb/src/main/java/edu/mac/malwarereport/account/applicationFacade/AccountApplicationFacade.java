/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.mac.malwarereport.account.applicationFacade;

import edu.mac.malwarereport.accesscontrol.interceptor.IsPermitted;
import edu.mac.malwarereport.accesscontrol.interceptor.IsPermittedInterceptor;
import edu.mac.malwarereport.accesscontrol.service.interceptor.AccessControlInterceptor;
import edu.mac.malwarereport.account.manager.*;
import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.authenticate.Authenticate2FA;

import edu.mac.malwarereport.account.data.AccountFacade;
import edu.mac.malwarereport.account.data.PasswordTokenFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.account.dto.EmailVerificationDTO;
import edu.mac.malwarereport.account.entity.Account;
import edu.mac.malwarereport.account.entity.EmailVerification;
import edu.mac.malwarereport.account.entity.PasswordToken;
import edu.mac.malwarereport.account.outputInfo.OutcomeStatus;
import edu.mac.malwarereport.account.outputInfo.RegisterStatus;
import edu.mac.malwarereport.account.outputInfo.ResetPasswordStatus;
import edu.mac.malwarereport.account.ownershipassignment.manager.AccountOrganisationManager;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.account.resource.AccountDetailGenerator;
import edu.mac.malwarereport.account.resource.DateChecker;
import edu.mac.malwarereport.account.resource.SecureTokenGenerator;
import edu.mac.malwarereport.account.subjectassignment.manager.SubjectRoleManager;
import edu.mac.malwarereport.role.dto.RoleDTO;
import edu.mac.malwarereport.subjectassignment.outputinfo.MappingStatus;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.interceptor.Interceptors;
import java.time.chrono.Era;
import java.util.Date;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class AccountApplicationFacade {

    @Inject
    private AccountManager accountManager;

    //Permission: Manager internal (Create user with role)
    @Interceptors({IsPermittedInterceptor.class})
    public RegisterStatus register(AccountDTO accountDTO, List<RoleDTO> accountRoles) throws Exception{
        return accountManager.register(accountDTO, accountRoles);
    }
    
    //Permission: all user 
    public ResetPasswordStatus activateNewAccount(AccountDTO accountDTO) {
        return accountManager.activateNewAccount(accountDTO);
    }
    
    //Permission: INTERNAL, ALL, SELF (Edit Profile)
    @Interceptors({AccessControlInterceptor.class})
    public OutcomeStatus updateAccount(AccountDTO accountDTO) {
       return accountManager.updateAccount(accountDTO);
    }
    
    //Permission: INTERNAL, ALL (remove user)
    @Interceptors({AccessControlInterceptor.class})
    public OutcomeStatus delete(AccountDTO accountDTO){
        return accountManager.delete(accountDTO);
    }

}

