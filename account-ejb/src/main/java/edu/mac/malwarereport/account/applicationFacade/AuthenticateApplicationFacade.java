/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.mac.malwarereport.account.applicationFacade;

import edu.mac.malwarereport.accesscontrol.interceptor.IsPermittedInterceptor;
import edu.mac.malwarereport.account.manager.*;
import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.authenticate.Authenticate2FA;
import edu.mac.malwarereport.account.authenticate.Captcha;

import edu.mac.malwarereport.account.data.AccountFacade;
import edu.mac.malwarereport.account.data.EmailVerificationFacade;
import edu.mac.malwarereport.account.dto.AccountDTO;
import edu.mac.malwarereport.account.dto.EmailVerificationDTO;
import edu.mac.malwarereport.account.entity.Account;
import edu.mac.malwarereport.account.entity.EmailVerification;
import edu.mac.malwarereport.account.entity.LoginAttempt;
import edu.mac.malwarereport.account.outputInfo.AuthenticateStatus;
import edu.mac.malwarereport.account.outputInfo.EmailVerificationStatus;
import edu.mac.malwarereport.account.ownershipassignment.manager.AccountOrganisationManager;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.account.resource.AccountDetailGenerator;
import edu.mac.malwarereport.account.resource.DateChecker;
import edu.mac.malwarereport.account.resource.SecureTokenGenerator;
import edu.mac.malwarereport.organisation.data.OrganisationFacade;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.interceptor.Interceptors;
import java.io.IOException;
import java.util.Date;

/**
 *
 * @author Jaibun Thana
 */
@Stateless

public class AuthenticateApplicationFacade {

    @Inject
    private AuthenticateManager authenticateManager;

    //Permission: no
    public AuthenticateStatus tryAuthorise(String email) {
        return authenticateManager.tryAuthorise(email);
    }
    
    //Permission: no
    public boolean isVerifiedCaptcha(String captchaResponse) throws IOException{
        return authenticateManager.isVerifiedCaptcha(captchaResponse);
    }
    
    //Permission: no
    public EmailVerificationStatus emailVerification(EmailVerificationDTO emailVerificationDTO) {
        return authenticateManager.emailVerification(emailVerificationDTO);
    }
    
    //Permission: no
    public boolean isAuthenticated() {
        return authenticateManager.isAuthenticated();
    }

    //Permission: no
    public boolean isFirstLogin(String email) {
        return authenticateManager.isFirstLogin(email);
    }

    //Permission: no
    public boolean checkInputTOTP(String totp, String email) {
        return authenticateManager.checkInputTOTP(totp, email);
    }
    
    //Permission: no
    public boolean isCredentialValid(String email, String password) {
        return authenticateManager.isCredentialValid(email, password);
    }
    
    //Permission: no
    public byte[] getAuthQR(String email, String issuer) throws Exception {
        return authenticateManager.getAuthQR(email, issuer);
    }

}
