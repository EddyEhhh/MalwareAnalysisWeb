/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role.permissionassignment.manager;

import edu.mac.malwarereport.permission.data.PermissionFacade;
import edu.mac.malwarereport.permission.dto.PermissionDTO;
import edu.mac.malwarereport.permission.entity.Permission;
import edu.mac.malwarereport.permissionassignment.outputInfo.CreateMappingStatus;
import edu.mac.malwarereport.permissionassignment.outputInfo.DeleteMappingStatus;
import edu.mac.malwarereport.role.data.RoleFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import edu.mac.malwarereport.role.entity.Role;
import edu.mac.malwarereport.role.permissionassignment.mapper.RolePermissionMapper;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class RolePermissionManager {

    @Inject
    private RolePermissionMapper rolePermissionMapper;

    @Inject
    private PermissionFacade permissionFacade;

    @Inject
    private RoleFacade roleFacade;

    //GET ALL PermissionDTO from Role
    public List<PermissionDTO> getAllPermissionByRoleDTO(RoleDTO roleDTO) {
        long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
        List<Long> permissionIdList = rolePermissionMapper.getAllPermissionIdbyRole(roleId);
        List<PermissionDTO> permissionDTOList = new ArrayList<>();
        for (Long permissionId : permissionIdList) {
            permissionDTOList.add(permissionFacade.find(permissionId).toDTO());
        }
        return permissionDTOList;
    }
    
    //GET ALL PermissionDTO from Role
    public List<Permission> getAllPermissionByRole(Role role) {
        long roleId = role.getId();
        List<Long> permissionIdList = rolePermissionMapper.getAllPermissionIdbyRole(roleId);
        List<Permission> permissionList = new ArrayList<>();
        for (Long permissionId : permissionIdList) {
            permissionList.add(permissionFacade.find(permissionId));
        }
        return permissionList;
    }

    //GET ALL ROLE WITH PERMISSION
    public List<RoleDTO> getAllRoleByPermission(PermissionDTO permissionDTO) {
        long permissionId = permissionFacade.getPermissionBySuuid(permissionDTO.getSuuid()).getId();
        List<Long> roleIdList = rolePermissionMapper.getAllRoleIdbyPermission(permissionId);
        List<RoleDTO> roleDTOList = new ArrayList<>();
        for (Long roleId : roleIdList) {
            roleDTOList.add(roleFacade.find(roleId).toDTO());
        }
        return roleDTOList;
    }

    public CreateMappingStatus createMultiMapping(RoleDTO roleDTO, List<PermissionDTO> permissionDTOList) {
        Long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
        if(permissionDTOList.size()<=0){
            rolePermissionMapper.deleteAllMappingByRoleId(roleId);
            return CreateMappingStatus.ERROR_INVALID_INPUT;
        }
        try {
            List<Long> newPermissionIdList = new ArrayList<>();
            for(PermissionDTO permissionDTO : permissionDTOList){
                newPermissionIdList.add(permissionFacade.getPermissionBySuuid(permissionDTO.getSuuid()).getId());
            }
            List<Long> permissionInheritIdList = new ArrayList<>();
            List<Long> permissionInheritByIdList = new ArrayList<>();
            //PREVENT CHILD AND PARENT FROM SHARING PERMISSION (DO NOT REMOVE)
//            //Get all inherited permission
//            for(RoleDTO eachRoleInheritedList : roleDTO.getInheritance(roleDTO)){
//                for(Long eachPermissionId : rolePermissionMapper.getAllPermissionIdbyRole(roleFacade.getRoleBySuuid(eachRoleInheritedList.getSuuid()).getId())){
//                    permissionInheritIdList.add(eachPermissionId);
//                    System.out.print("INHERITED PERMISSION: " + eachRoleInheritedList.getName() + ":" + permissionFacade.find(eachPermissionId).getName());
//                }
//            }
//            
//            //Get all inheritedBy permission
//            for(RoleDTO eachRoleInheritedByList : roleDTO.getAllInheritedBy(roleDTO)){
//                for(Long eachPermissionId : rolePermissionMapper.getAllPermissionIdbyRole(roleFacade.getRoleBySuuid(eachRoleInheritedByList.getSuuid()).getId())){
//                    permissionInheritByIdList.add(eachPermissionId);
//                    System.out.print("INHERITED BY PERMISSION: " + eachRoleInheritedByList.getName() + ":" + permissionFacade.find(eachPermissionId).getName());
//                }
//            }
            //Check duplicate inherited permission
            //Remove perms that are repeated(DO NOT REMOVE)
//            for(Long eachPermissionId : permissionInheritIdList){
//                if(newPermissionIdList.contains(eachPermissionId)){
//                    System.out.print("DUPLICATE INHERIT PERM: "  + permissionFacade.find(eachPermissionId).getName());
//                    newPermissionIdList.remove(eachPermissionId);
//                }
//            }
            //Check duplicate inherited by permission
//            for(Long eachPermissionId : permissionInheritByIdList){
//                if(newPermissionIdList.contains(eachPermissionId)){
//                    System.out.print("DUPLICATE INHERIT BY PERM: "  + permissionFacade.find(eachPermissionId).getName());
//                    return CreateMappingStatus.ERROR_PERMISSION_INHERITBY;
//                }
//            }
            //clear mapping role and update user roles
            rolePermissionMapper.deleteAllMappingByRoleId(roleId);
            for (Long eachPermissionId : newPermissionIdList) {
                rolePermissionMapper.createMapping(roleId, eachPermissionId);
            }
            return CreateMappingStatus.SUCCESS;
        } catch (Exception e) {
            return CreateMappingStatus.ERROR;
        }
    }

    public int countRoleByPermission(PermissionDTO permissionDTO) {
        long permissionId = permissionFacade.getPermissionBySuuid(permissionDTO.getSuuid()).getId();
        return rolePermissionMapper.countRoleWithPermission(permissionId);
    }

    public boolean isPermissionMapped(PermissionDTO permissionDTO) {
        long permissionId = permissionFacade.getPermissionBySuuid(permissionDTO.getSuuid()).getId();
        return rolePermissionMapper.isPermissionMapped(permissionId);
    }

    public DeleteMappingStatus deleteMapping(RoleDTO roleDTO, PermissionDTO permissionDTO) {
        try {
            long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
            long permissionId = permissionFacade.getPermissionBySuuid(permissionDTO.getSuuid()).getId();
            rolePermissionMapper.deleteMapping(roleId, permissionId);
            return DeleteMappingStatus.SUCCESS;
        } catch (Exception e) {
            return DeleteMappingStatus.ERROR;
        }
    }

    public DeleteMappingStatus deleteAllMappingByRole(RoleDTO roleDTO) {
        try {
            long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
            rolePermissionMapper.deleteAllMappingByRoleId(roleId);
            return DeleteMappingStatus.SUCCESS;
        } catch (Exception e) {
            return DeleteMappingStatus.ERROR;
        }
    }

}
