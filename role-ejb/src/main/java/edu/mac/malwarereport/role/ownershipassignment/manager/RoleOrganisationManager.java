/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role.ownershipassignment.manager;

import com.sun.net.httpserver.Authenticator;
import edu.mac.malwarereport.account.authenticate.Authenticate;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.account.subjectassignment.manager.SubjectRoleManager;
import edu.mac.malwarereport.role.outputInfo.RoleMappingStatus;
import edu.mac.malwarereport.role.data.RoleFacade;
import edu.mac.malwarereport.role.dto.RoleDTO;
import edu.mac.malwarereport.role.entity.Role;
import edu.mac.malwarereport.role.outputInfo.DeleteRoleMappingStatus;
import edu.mac.malwarereport.role.outputInfo.OutcomeStatus;
import edu.mac.malwarereport.role.ownershipassignment.mapper.RoleOrganisationMapper;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class RoleOrganisationManager {

    @Inject
    private RoleOrganisationMapper roleOrganisationMapper;
    
    @Inject
    private AccountOrganisationMapper accountOrganisationMapper;

    @Inject
    private Authenticate authenticate;
    
    @Inject
    private SubjectRoleManager subjectRoleManager;
    
    @Inject
    private RoleFacade roleFacade;

    public List<RoleDTO> getRoleList() {
        Long accountId = authenticate.getCurrentAccount().getId();
        Long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        List<Long> roleIdList = roleOrganisationMapper.getRoleIdList(organisationId);
        List<RoleDTO> roleDTOList = new ArrayList<>();
        for (Long tempRoleId : roleIdList) {
            roleDTOList.add(roleFacade.find(tempRoleId).toDTO());
        }
        return roleDTOList;
    }
    //ROLEDTO CHILD TO ROLE CHILD
//    private void inheritToObject(RoleDTO roleDTO){
//        List<Role> childrenList = new ArrayList<>();
//        for(RoleDTO childrenDTO:roleDTO.getChildren()){
//            childrenList.add(roleFacade.getRoleBySuuid(childrenDTO.getSuuid()));
//        }
//        Role role = roleDTO.toObject();
//        role.setChildren(childrenList);
//    }
    
    public RoleMappingStatus createRoleToOrganisation(RoleDTO roleDTO){
        long accountId = authenticate.getCurrentAccount().getId();
        long organisationId = accountOrganisationMapper.getOrganisationId(accountId);
        if(roleOrganisationMapper.isRoleNameExist(roleDTO.getName(), organisationId)){
            return RoleMappingStatus.EXIST;
        }
        //Obtain existing children frm db
        List<Role> childrenList = new ArrayList<>();
        for(RoleDTO childrenDTO:roleDTO.getChildren()){
            Role tempChild = roleFacade.getRoleBySuuid(childrenDTO.getSuuid());
            childrenList.add(tempChild);
            if(tempChild.getSuuid().equalsIgnoreCase(roleDTO.getSuuid())){
                return RoleMappingStatus.INVALID_INPUT_SELF;
            }
        }
        //get all indirect inheritance 
        List<RoleDTO> indirectInheritance = new ArrayList<>();
        for(RoleDTO eachChildren : roleDTO.getChildren()){
            for(RoleDTO eachInheritance : eachChildren.getInheritance(eachChildren)){
                indirectInheritance.add(eachInheritance);
            }
        }
//        List<RoleDTO> inheritedBy = roleDTO.getAllInheritedBy(roleDTO);
        //reject if validation is not met
        for(RoleDTO eachInherit : roleDTO.getChildren()){
            //check for child for repeat
            for(RoleDTO eachIndirectInheritence : indirectInheritance){
                if(eachIndirectInheritence.getSuuid().equalsIgnoreCase(eachInherit.getSuuid())){
                    return RoleMappingStatus.INVALID_INHERITANCE;
                }
            }
//            //Check for inheritance loop
//            for(RoleDTO eachParent : inheritedBy){
////                System.out.print("eachParent: " + eachParent.getName());
//                if(eachParent.getSuuid().equalsIgnoreCase(eachInherit.getSuuid())){
//                    return RoleMappingStatus.INVALID_INHERITANCE;
//                }
//            }
        }
        Role role = roleDTO.toObject();
        role.setChildren(childrenList);
        try{
            roleFacade.create(role);
            long roleId = role.getId();
            roleOrganisationMapper.createMapping(organisationId, roleId);
            return RoleMappingStatus.SUCCESS;
        }catch (Exception e){
            return RoleMappingStatus.ERROR;
        }
    }
    
    public DeleteRoleMappingStatus deleteRoleOrganisation(RoleDTO roleDTO){
        Role role = roleFacade.getRoleBySuuid(roleDTO.getSuuid());
        if(subjectRoleManager.isRoleMapped(roleDTO)){
            return DeleteRoleMappingStatus.INVALID_ROLE_ASSIGNED;
        }
        if(role.getChildren().size()>0){
            return DeleteRoleMappingStatus.INVALID_INHERIT;
        }else if(role.getParent().size()>0){
            return DeleteRoleMappingStatus.INVALID_INHERITED;
        }
        try{
            roleFacade.remove(role);
            roleOrganisationMapper.deleteMappingByRoleId(role.getId());
            return DeleteRoleMappingStatus.SUCCESS;
        }catch (Exception e){
            return DeleteRoleMappingStatus.ERROR;
        }
    }
            
    
    public RoleMappingStatus createMapping(RoleDTO roleDTO, String organisationSuuid){
        try{
        long roleId = roleFacade.getRoleBySuuid(roleDTO.getSuuid()).getId();
        long organisationId = roleOrganisationMapper.getOrganisationId(organisationSuuid);
        return roleOrganisationMapper.createMapping(organisationId, roleId);
    }catch (Exception e){
    return RoleMappingStatus.FAILURE;
}
    }
    
    public OutcomeStatus deleteMapping(RoleDTO roleDTO){
        String roleSuuid = roleDTO.getSuuid();
        long roleId = roleFacade.getRoleBySuuid(roleSuuid).getId();
        roleOrganisationMapper.deleteMappingByRoleId(roleId);
        return OutcomeStatus.SUCCESS;
    }
    
//    public OutcomeStatus sampleToOrganisation(AccountDTO accountDTO) throws Exception {
//        try {
//        switch (sampleManager.register(accountDTO)) {
//            case SUCCESS:
//                long newAccountId = accountFacade.getAccount(accountDTO.getEmail()).getId();
//                long currentAccountId = authenticate.getCurrentAccount().getId();
//                long organisationId = reportOrganisationMapper.getOrganisationId(currentAccountId);
//                reportOrganisationMapper.createMapping(organisationId, newAccountId);
//                return RegisterStatus.SUCCESS;
//            case EMAIL_EXIST:
//                return RegisterStatus.EMAIL_EXIST;
//            default:
//                return RegisterStatus.FAILURE;
//                
//        }
//            } catch (Exception e) {
//                return RegisterStatus.FAILURE;
//        }
//    }

}
