/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role.applicationFacade;

import edu.mac.malwarereport.accesscontrol.interceptor.IsAdministratorInterceptor;
import edu.mac.malwarereport.accesscontrol.interceptor.IsPermittedInterceptor;
import edu.mac.malwarereport.accesscontrol.service.interceptor.AccessControlInterceptor;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import edu.mac.malwarereport.role.manager.*;
import edu.mac.malwarereport.permission.dto.PermissionDTO;
import edu.mac.malwarereport.role.dto.RoleDTO;
import edu.mac.malwarereport.role.outputInfo.RoleMappingStatus;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.interceptor.Interceptors;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Stateless

public class RoleApplicationFacade {
    
    @Inject
    private RoleManager roleManager;
    
    //PERMISSION: INTERNAL view each role
    @Interceptors({AccessControlInterceptor.class})
    public RoleDTO findBySuuid(RoleDTO roleDTO){
        return roleManager.findBySuuid(roleDTO);
    }
    //PERMISSION: INTERNAL create role in org MANAGER ONLY
    @Interceptors({IsPermittedInterceptor.class})
    public RoleMappingStatus create(RoleDTO roleDTO, List<PermissionDTO> permissionDTOList){
        return roleManager.create(roleDTO, permissionDTOList);
    }
    
//     //PERMISSION: INTERNAL create role in org MANAGER ONLY
//    @Interceptors({IsAdministratorInterceptor.class})
//    public RoleMappingStatus createByAdmin(RoleDTO roleDTO, List<PermissionDTO> permissionDTOList, OrganisationDTO organisationDTO){
//        return roleManager.createByAdmin(roleDTO, permissionDTOList, organisationDTO);
//    }
    
    //PERMISSION: INTERNAL edit role details and permission MANAGER ONLY
    @Interceptors({IsPermittedInterceptor.class})
    public RoleMappingStatus update(RoleDTO roleDTO, List<PermissionDTO> permissionDTOList){
        return roleManager.update(roleDTO, permissionDTOList);
    }
    
}
