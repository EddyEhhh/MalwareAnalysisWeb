/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role.permissionassignment.mapper;

import edu.mac.malwarereport.permissionassignment.entity.PermissionAssignment;
import edu.mac.malwarereport.permissionassignment.manager.PermissionAssignmentManager;
import edu.mac.malwarereport.permissionassignment.outputInfo.CreateMappingStatus;
import edu.mac.malwarereport.permissionassignment.outputInfo.DeleteMappingStatus;
import edu.mac.malwarereport.subjectassignment.outputinfo.MappingStatus;
import edu.mac.malwarereport.role.data.RoleFacade;
import edu.mac.malwarereport.subjectassignment.entity.SubjectAssignment;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class RolePermissionMapper {
    
    @Inject
    private PermissionAssignmentManager permissionAssignmentManager;
    
    @Inject
    private RoleFacade roleFacade;
    
//    public long getOrganisationId(String organisationSuuid){
//        return organisationManager.getIdBySuuid(organisationSuuid);
//    }
    
    public CreateMappingStatus createMapping(Long roleId, Long permissionId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        try{
            permissionAssignment.setPrimaryId(roleId);
            permissionAssignment.setSecondaryId(permissionId);
            return (permissionAssignmentManager.create(permissionAssignment));
        }catch (Exception e){
            return CreateMappingStatus.ERROR;
        }
    }
    
    
    public DeleteMappingStatus deleteMapping(Long roleId, Long permissionId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        try{
            permissionAssignment.setPrimaryId(roleId);
            permissionAssignment.setSecondaryId(permissionId);
            return permissionAssignmentManager.delete(permissionAssignment);
        }catch (Exception e){
            return DeleteMappingStatus.ERROR;
        }
    }
    
    
    //GET ROLE'S PERMISSION
    public List<Long> getAllPermissionIdbyRole(Long roleId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        permissionAssignment.setPrimaryId(roleId);
        return permissionAssignmentManager.getAllSecondaryId(permissionAssignment);
    }
    
    //GET ALL ROLE THAT HAS PERMISSION
    public List<Long> getAllRoleIdbyPermission(Long permissionId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        permissionAssignment.setSecondaryId(permissionId);
        return permissionAssignmentManager.getAllPrimaryId(permissionAssignment);
    }
    
    //REMOVE ALL Role's Permission
    public DeleteMappingStatus deleteAllMappingByRoleId(Long roleId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        permissionAssignment.setPrimaryId(roleId);
        return permissionAssignmentManager.deleteAllByPrimary(permissionAssignment);
    }
    
    public int countRoleWithPermission(long permissionId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        permissionAssignment.setSecondaryId(permissionId);
        return permissionAssignmentManager.countAllMappingBySecondaryId(permissionAssignment);
    }
    
    public int countRoleWithAccount(long roleId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        permissionAssignment.setPrimaryId(roleId);
        return permissionAssignmentManager.countAllMappingByPrimaryId(permissionAssignment);
    }
    
    public boolean isPermissionMapped(long permissionId){
        PermissionAssignment permissionAssignment = new PermissionAssignment();
        permissionAssignment.setSecondaryId(permissionId);
        return permissionAssignmentManager.isSecondaryMapped(permissionAssignment);
    }
    
}
