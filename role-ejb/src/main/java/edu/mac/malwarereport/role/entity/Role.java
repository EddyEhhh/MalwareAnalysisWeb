/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role.entity;

import edu.mac.malwarereport.role.dto.RoleDTO;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 *
 * @author tohyu
 */
@Entity
@Table(name="role")
@NamedQueries({
    @NamedQuery(name = "Role.bySuuid", query = "select r from Role r where r.suuid = :suuid")
})
public class Role {
    
    @Id
    @Column(name="id")
    @GeneratedValue(strategy=GenerationType.AUTO)
    private long id;
    
    @NotBlank
    @Pattern(regexp = "^[A-Za-z0-9 /\\-_,.']+$", message = "Invalid name")
    @Column(name="name")
    private String name;
    
    @ManyToMany(fetch = FetchType.EAGER, mappedBy="children")
    @JoinTable(name="RoleId", 
                joinColumns={@JoinColumn(name="ParentId")}, 
                inverseJoinColumns={@JoinColumn(name="UserId")})    
    private List<Role> parent;
    
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name="RoleId", 
                joinColumns={@JoinColumn(name="UserId")}, 
                inverseJoinColumns={@JoinColumn(name="ParentId")})
    private List<Role> children;

    
    @Column(name="description")
    @Pattern(regexp = "^[A-Za-z0-9 /\\-_,.']+$", message = "Invalid description")
    private String description;
    
    @Column(name="suuid", unique = true)
    private String suuid;
    
    public Role(){}
    
    public Role(String name, String description)
    {
        this.name = name;
        this.description = description;
    }
    
    public Role(String name, String description, List<Role> children)
    {
        this.name = name;
        this.description = description;
        this.children = children;
    }
    
    
    
    @PrePersist
    public void onCreate(){
        this.suuid = UUID.randomUUID().toString();
        this.parent = new ArrayList<>();
    }
    
//    public RoleDTO toDTO(){
//        RoleDTO roleDTO = new RoleDTO(this.name, this.description, this.suuid);
//        
//        if(this.children.size()>0){
//            List<Role> childList = this.children;
//            List<RoleDTO> childDTOList = new ArrayList<>();
//            for(Role child : childList){
//                childDTOList.add(child.toDTO());
//            }
//            roleDTO.setChildren(childDTOList);
//            }
//        return roleDTO;
//        }
    
    public RoleDTO toDTO(){
        RoleDTO roleDTO = new RoleDTO(this.name, this.description, this.suuid);
        if(this.parent.size()>0){
            Role tempParent = new Role();
            tempParent.setParent(this.parent);
            roleDTO.setParent(getParentInheritance(tempParent).getParent());
        }
        if(this.children.size()>0){
            Role tempChildren = new Role();
            tempChildren.setChildren(this.children);
            roleDTO.setChildren(getChildrenInheritance(tempChildren).getChildren());
        }
        return roleDTO;
    }
    
//        public RoleDTO toDTO(){
//        RoleDTO roleDTO = new RoleDTO(this.name, this.description, this.suuid);
//        System.out.print("---------" + this.name + "----------");
//        System.out.print("C1");
//        for(Role role : this.children){
//            System.out.print("C2");
//            System.out.print("Children: " + role.getName());
//        }
//        System.out.print("C3");
//        for(Role role : this.parent){
//            System.out.print("C4");
//            System.out.print("Parent: " + role.getName());
//        }
//        System.out.print("C5");
//        if(this.parent.size()>0){
//            System.out.print("C6");
//            System.out.print("PARENTSIZE: " + this.parent.size());
//            for(Role role : this.parent){
//                System.out.print("C7");
//                System.out.print(role.getName());
//            }
//            System.out.print("C8");
//            Role tempParent = new Role();
//            tempParent.setParent(this.parent);
//            roleDTO.setParent(getParentInheritance(tempParent).getParent());
//        }
//        System.out.print("C9");
//        if(this.children.size()>0){
//           System.out.print("CHILDSIZE: " + this.children.size());
//            Role tempChildren = new Role();
//            tempChildren.setChildren(this.children);
//            roleDTO.setChildren(getChildrenInheritance(tempChildren).getChildren());
//        }
//        return roleDTO;
//    }
    
    public RoleDTO getParentInheritance(Role role){
        RoleDTO roleDTO = new RoleDTO(role.getName(), role.getDescription(), role.getSuuid());
        if(role.getParent().size()>0){
            List<Role> parentList = role.getParent();
            List<RoleDTO> parentDTOList = new ArrayList<>();
            for(Role parent : parentList){
                parentDTOList.add(getParentInheritance(parent));
            }roleDTO.setParent(parentDTOList);
        }return roleDTO;
    }
    
    public RoleDTO getChildrenInheritance(Role role){
        RoleDTO roleDTO = new RoleDTO(role.getName(), role.getDescription(), role.getSuuid());
        if(role.getChildren().size()>0){
            List<Role> childrenList = role.getChildren();
            List<RoleDTO> childrenDTOList = new ArrayList<>();
            for(Role children : childrenList){
                childrenDTOList.add(getChildrenInheritance(children));
            }roleDTO.setChildren(childrenDTOList);
        }return roleDTO;
    }
    
    
    public List<Role> getInheritance(Role role, List<Role> inheritance) {
        for (Role child : role.getChildren()) {
            inheritance.add(child);
            getInheritance(child, inheritance);
        } 
        return inheritance;
    }
    
    public RoleDTO toDTO(Role role){
        RoleDTO roleDTO = new RoleDTO(role.getName(), role.getDescription(), role.getSuuid());
        return roleDTO;
    }
    
    /**
     * @return the id
     */
    public long getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * @return the roleName
     */
    public String getName() {
        return name;
    }

    /**
     * @param roleName the roleName to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    
        /**
     * @return the suuid
     */
    public String getSuuid() {
        return suuid;
    }

    /**
     * @param suuid the suuid to set
     */
    public void setSuuid(String suuid) {
        this.suuid = suuid;
    }

    /**
     * @return the parent
     */
    public List<Role> getParent() {
        return parent;
    }

    /**
     * @param parent the parent to set
     */
    public void setParent(List<Role> parent) {
        this.parent = parent;
    }

    /**
     * @return the children
     */
    public List<Role> getChildren() {
        return children;
    }

    /**
     * @param children the children to set
     */
    public void setChildren(List<Role> children) {
        this.children = children;
    }
    
}
