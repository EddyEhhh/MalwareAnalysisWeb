/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.role.ownershipassignment.mapper;

import edu.mac.malwarereport.organisation.manager.OrganisationManager;
import edu.mac.malwarereport.role.outputInfo.RoleMappingStatus;
import edu.mac.malwarereport.personnel.entity.OwnershipAssignment;
import edu.mac.malwarereport.personnel.manager.OwnershipAssignmentManager;
import edu.mac.malwarereport.role.data.RoleFacade;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.List;

/**
 *
 * @author Jaibun Thana
 */
@Stateless
public class RoleOrganisationMapper {
    
    @Inject
    private OwnershipAssignmentManager ownershipAssignmentManager;
    
    @Inject
    private OrganisationManager organisationManager;
    
    @Inject
    private RoleFacade roleFacade;
    
    public OwnershipAssignment getOwnershipAssignment(){
        String primaryType = "org";
        String secondaryType = "role";
        OwnershipAssignment organisationRoleAssignment = new OwnershipAssignment(primaryType, secondaryType);
        return organisationRoleAssignment;
    }
    
    public boolean isRoleInOrganisation(Long organisationId, Long roleId){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        organisationRoleAssignment.setPrimaryId(organisationId);
        organisationRoleAssignment.setSecondaryId(roleId);
        return ownershipAssignmentManager.isMapped(organisationRoleAssignment);
    }
    
    public long getOrganisationId(String organisationSuuid){
        return organisationManager.getIdBySuuid(organisationSuuid);
    }
    
    public long getOrganisationId(Long roleId){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        organisationRoleAssignment.setSecondaryId(roleId);
        return ownershipAssignmentManager.getPrimaryId(organisationRoleAssignment);
    }
    
    public RoleMappingStatus createMapping(Long organisationId, Long roleId){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        try{
            organisationRoleAssignment.setPrimaryId(organisationId);
            organisationRoleAssignment.setSecondaryId(roleId);
            switch(ownershipAssignmentManager.create(organisationRoleAssignment)){
                case SUCCESS:
                    return RoleMappingStatus.SUCCESS;
                case EXIST:
                    return RoleMappingStatus.EXIST;
                case ERROR: 
                    return RoleMappingStatus.ERROR;
                case FAILURE:
                default:
                    return RoleMappingStatus.FAILURE;
            }
        }catch (Exception e){
            return RoleMappingStatus.FAILURE;
        }
    }
    
    public List<Long> getRoleIdList(Long organisationId){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        organisationRoleAssignment.setPrimaryId(organisationId);
        return ownershipAssignmentManager.getAllSecondaryId(organisationRoleAssignment);
    }
    
    
    
    public boolean deleteMappingByRoleId(Long roleId){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        organisationRoleAssignment.setSecondaryId(roleId);
        return ownershipAssignmentManager.deleteBySecondary(organisationRoleAssignment);
    }
    
    public int countRole(Long organiastionId){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        organisationRoleAssignment.setPrimaryId(organiastionId);
        return ownershipAssignmentManager.countAllMappingByPrimaryId(organisationRoleAssignment);
    }
    
    public boolean isRoleNameExistOnUpdate(Long roleId, String roleName){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        long organisationId = getOrganisationId(roleId);
        organisationRoleAssignment.setPrimaryId(organisationId);
        List<Long> roleIdList = ownershipAssignmentManager.getAllSecondaryId(organisationRoleAssignment);
        try{
        roleIdList.remove(roleId);
        }catch(Exception e){}
        for(Long eachRoleId : roleIdList){
            if(roleFacade.find(eachRoleId).getName().equalsIgnoreCase(roleName)){
                return true;
            }
        }return false;
    }
    
    public boolean isRoleNameExist(String roleName, long organisationId){
        OwnershipAssignment organisationRoleAssignment = getOwnershipAssignment();
        organisationRoleAssignment.setPrimaryId(organisationId);
        List<Long> roleIdList = ownershipAssignmentManager.getAllSecondaryId(organisationRoleAssignment);
        for(Long eachRoleId : roleIdList){
            if(roleFacade.find(eachRoleId).getName().equalsIgnoreCase(roleName)){
                return true;
            }
        }return false;
    }
    
    
//    public List<Long> getOrganisationIdList(Long organisationId){
//        organisationAccountAssignment.setPrimaryId(organisationId);
//        return ownershipAssignmentManager.getAllSecondaryId(organisationAccountAssignment);
//    }
    
//    public long getOrganisationId(Long accountId){
//        organisationAccountAssignment.setSecondaryId(accountId);
//        return ownershipAssignmentManager.getPrimaryId(organisationAccountAssignment);
//    }
    
//    public boolean isMapped(Long organisationId, Long accountId){
//        return ownershipAssignmentManager.isMapped(organisationId, organisationDiscriminator, accountId, accountDiscriminator);
//    }
    
    
}
