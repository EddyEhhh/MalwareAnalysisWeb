/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.mac.malwarereport.organisation.manager;

import edu.mac.malwarereport.account.manager.AccountManager;
import edu.mac.malwarereport.account.ownershipassignment.mapper.AccountOrganisationMapper;
import edu.mac.malwarereport.organisation.data.OrganisationFacade;
import edu.mac.malwarereport.organisation.dto.OrganisationDTO;
import edu.mac.malwarereport.organisation.dto.SettingDTO;
import edu.mac.malwarereport.organisation.entity.Organisation;
import edu.mac.malwarereport.organisation.outputinfo.CreateOrganisationStatus;
import edu.mac.malwarereport.organisation.outputinfo.UpdateOrganisationStatus;
import edu.mac.malwarereport.organisation.outputinfo.DeleteOrganisationStatus;
import edu.mac.malwarereport.organisation.ownershipassignment.mapper.OnlyOrganisationMapper;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tohyu
 */
@Stateless
public class OrganisationManager {
    
    @Inject
    private OrganisationFacade facade;
    
    @Inject
    private AccountOrganisationMapper accountOrganisationMapper;
    
    @Inject
    private OnlyOrganisationMapper onlyOrganisationMapper;
    
    @Inject
    private AccountManager accountManager;
   
    
    public OrganisationDTO findBySuuid(String suuid){
        Organisation organisation = facade.getOrganisationBySuuid(suuid);
        OrganisationDTO organisationDTO = organisation.toDTO();
        organisationDTO.setNumberOfMember(accountOrganisationMapper.countAccount(organisation.getId()));
        return organisationDTO;
    }
    
    public long getIdBySuuid(String suuid){
        Organisation organisation = facade.getOrganisationBySuuid(suuid);
        return organisation.getId();
    }
    
    public OrganisationDTO findById(long id){
        Organisation organisation = facade.find(id);
        return organisation.toDTO();
    }
    
    public List<OrganisationDTO> findAll(){
        List<Organisation> organisationList = facade.findAll();
        List<OrganisationDTO> organisationDTOList = new ArrayList<>();
        for(int i = 0; i < organisationList.size(); i++){
            OrganisationDTO tempOrganisation = organisationList.get(i).toDTO();
            organisationDTOList.add(tempOrganisation);
        }
        return organisationDTOList;
    }
    
    public CreateOrganisationStatus createOrganisation(OrganisationDTO organisationDTO){
        try{
        Organisation organisation = organisationDTO.toOrganisation();
        facade.create(organisation);
        return CreateOrganisationStatus.SUCCESS;
        }catch (Exception e){
            return CreateOrganisationStatus.ERROR;
        }
    }
    
    public UpdateOrganisationStatus updateOrganisation(OrganisationDTO organisationDTO){
        try{
        String suuid = organisationDTO.getSuuid();
        Organisation currentOrganisation = facade.getOrganisationBySuuid(suuid);
        String name = organisationDTO.getName();
        String description = organisationDTO.getDescription();
        SettingDTO settingDTO = organisationDTO.getSettingDTO();
        int maxMember = settingDTO.getMaxMember();
        int maxScan = settingDTO.getMaxScan();
        currentOrganisation.setName(name);
        currentOrganisation.setDescription(description);
        currentOrganisation.getSetting().setMaxMember(maxMember);
        currentOrganisation.getSetting().setMaxScan(maxScan);
        facade.edit(currentOrganisation);
            return UpdateOrganisationStatus.SUCCESS;
        }
        catch (Exception e){
            return UpdateOrganisationStatus.ERROR; 
        }
    }
    
    public DeleteOrganisationStatus deleteOrganisation(OrganisationDTO organisationDTO){
        try{
        String suuid = organisationDTO.getSuuid();
        System.out.print(organisationDTO.getName() + " : " + suuid);
        Organisation currentOrganisation = facade.getOrganisationBySuuid(suuid);
        long organisationId = currentOrganisation.getId();
        facade.remove(currentOrganisation);
        //delete all account
        for(Long eachAccountId : accountOrganisationMapper.getAccountIdList(organisationId)){
                accountManager.delete(accountManager.getById(eachAccountId));
            }
        onlyOrganisationMapper.deleteAllByPrimaryOnly(currentOrganisation);
//        accountOrganisationMapper.getAccountIdList(organisationId);
        
        return DeleteOrganisationStatus.SUCCESS;
        }catch(Exception e){
            return DeleteOrganisationStatus.ERROR;
        }
    }
}
